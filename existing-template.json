"AWSTemplateFormatVersion: '2010-09-09'\nDescription: Recursive Learning REST API Lambda with API Gateway\n\nParameters:\n  Environment:\n    Type: String\n    Default: dev\n    AllowedValues:\n      - dev\n      - prod\n    Description: Environment name\n  S3Bucket:\n    Type: String\n    Description: S3 bucket for deployment artifacts\n  AlarmEmail:\n    Type: String\n    Default: \"\"\n    Description: Email address to notify when alarms are triggered (optional)\n\nResources:\n  RLRestApi:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: !Sub ${AWS::StackName}-api\n      Description: Recursive Learning REST API\n      FailOnWarnings: true\n\n  ApiDeployment:\n    Type: AWS::ApiGateway::Deployment\n    DependsOn: \n      - ApiResourceContext\n      - ApiResourceMock\n      - ApiMethodContextPost\n      - ApiMethodMockGet\n      - ApiMethodContextOptions\n      - ApiMethodMockOptions\n    Properties:\n      RestApiId: !Ref RLRestApi\n      Description: API deployment\n\n  ApiStage:\n    Type: AWS::ApiGateway::Stage\n    DependsOn: ApiDeployment\n    Properties:\n      DeploymentId: !Ref ApiDeployment\n      RestApiId: !Ref RLRestApi\n      StageName: !Ref Environment\n      MethodSettings:\n        - ResourcePath: \"/*\"\n          HttpMethod: \"*\"\n          MetricsEnabled: true\n          DataTraceEnabled: true\n          ThrottlingBurstLimit: 100\n          ThrottlingRateLimit: 50\n\n  ApiResourceContext:\n    Type: AWS::ApiGateway::Resource\n    Properties:\n      RestApiId: !Ref RLRestApi\n      ParentId: !GetAtt RLRestApi.RootResourceId\n      PathPart: api\n\n  ApiResourceV1:\n    Type: AWS::ApiGateway::Resource\n    Properties:\n      RestApiId: !Ref RLRestApi\n      ParentId: !Ref ApiResourceContext\n      PathPart: v1\n\n  ApiResourceContextEndpoint:\n    Type: AWS::ApiGateway::Resource\n    Properties:\n      RestApiId: !Ref RLRestApi\n      ParentId: !Ref ApiResourceV1\n      PathPart: context\n\n  ApiResourceMock:\n    Type: AWS::ApiGateway::Resource\n    Properties:\n      RestApiId: !Ref RLRestApi\n      ParentId: !Ref ApiResourceV1\n      PathPart: mock\n\n  ApiMethodContextPost:\n    Type: AWS::ApiGateway::Method\n    Properties:\n      RestApiId: !Ref RLRestApi\n      ResourceId: !Ref ApiResourceContextEndpoint\n      HttpMethod: POST\n      AuthorizationType: NONE\n      ApiKeyRequired: true\n      Integration:\n        Type: AWS_PROXY\n        IntegrationHttpMethod: POST\n        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RLRestApiFunction.Arn}/invocations\n      MethodResponses:\n        - StatusCode: 200\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n\n  ApiMethodContextOptions:\n    Type: AWS::ApiGateway::Method\n    Properties:\n      RestApiId: !Ref RLRestApi\n      ResourceId: !Ref ApiResourceContextEndpoint\n      HttpMethod: OPTIONS\n      AuthorizationType: NONE\n      Integration:\n        Type: MOCK\n        IntegrationResponses:\n          - StatusCode: 200\n            ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: \"'https://recursivelearning.app'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key'\"\n              method.response.header.Access-Control-Allow-Methods: \"'GET,POST,OPTIONS'\"\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n      MethodResponses:\n        - StatusCode: 200\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n\n  ApiMethodMockGet:\n    Type: AWS::ApiGateway::Method\n    Properties:\n      RestApiId: !Ref RLRestApi\n      ResourceId: !Ref ApiResourceMock\n      HttpMethod: GET\n      AuthorizationType: NONE\n      Integration:\n        Type: MOCK\n        IntegrationResponses:\n          - StatusCode: 200\n            ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: \"'https://recursivelearning.app'\"\n            ResponseTemplates:\n              application/json: '{\"message\": \"Mock response successful\", \"timestamp\": \"$context.requestTimeEpoch\"}'\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n      MethodResponses:\n        - StatusCode: 200\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n\n  ApiMethodMockOptions:\n    Type: AWS::ApiGateway::Method\n    Properties:\n      RestApiId: !Ref RLRestApi\n      ResourceId: !Ref ApiResourceMock\n      HttpMethod: OPTIONS\n      AuthorizationType: NONE\n      Integration:\n        Type: MOCK\n        IntegrationResponses:\n          - StatusCode: 200\n            ResponseParameters:\n              method.response.header.Access-Control-Allow-Origin: \"'https://recursivelearning.app'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key'\"\n              method.response.header.Access-Control-Allow-Methods: \"'GET,POST,OPTIONS'\"\n        RequestTemplates:\n          application/json: '{\"statusCode\": 200}'\n      MethodResponses:\n        - StatusCode: 200\n          ResponseParameters:\n            method.response.header.Access-Control-Allow-Origin: true\n            method.response.header.Access-Control-Allow-Headers: true\n            method.response.header.Access-Control-Allow-Methods: true\n\n  RLRestApiFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref S3Bucket\n        S3Key: !Sub ${Environment}/lambda.zip\n      Handler: lambda_handler_integration.handler\n      Runtime: nodejs18.x\n      Timeout: 30\n      MemorySize: 256\n      Environment:\n        Variables:\n          NODE_ENV: !Ref Environment\n      Role: !GetAtt LambdaExecutionRole.Arn\n\n  LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Policies:\n        - PolicyName: SSMParameterReadPolicy\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ssm:GetParameter\n                  - ssm:GetParameters\n                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/integraled/central/*'\n        - PolicyName: CloudWatchLogsPolicy\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Resource: \n                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*'\n\n  ApiKey:\n    Type: AWS::ApiGateway::ApiKey\n    DependsOn: ApiStage\n    Properties:\n      Name: !Sub ${AWS::StackName}-api-key\n      Enabled: true\n      StageKeys:\n        - RestApiId: !Ref RLRestApi\n          StageName: !Ref Environment\n\n  UsagePlan:\n    Type: AWS::ApiGateway::UsagePlan\n    DependsOn: ApiStage\n    Properties:\n      UsagePlanName: !Sub ${AWS::StackName}-usage-plan\n      Description: Usage plan for RL REST API\n      ApiStages:\n        - ApiId: !Ref RLRestApi\n          Stage: !Ref Environment\n      Quota:\n        Limit: 5000\n        Period: MONTH\n      Throttle:\n        BurstLimit: 100\n        RateLimit: 50\n\n  UsagePlanKey:\n    Type: AWS::ApiGateway::UsagePlanKey\n    DependsOn: [UsagePlan, ApiKey]\n    Properties:\n      KeyId: !Ref ApiKey\n      KeyType: API_KEY\n      UsagePlanId: !Ref UsagePlan\n\n  LambdaPermissionApiGateway:\n    Type: AWS::Lambda::Permission\n    Properties:\n      FunctionName: !Ref RLRestApiFunction\n      Action: lambda:InvokeFunction\n      Principal: apigateway.amazonaws.com\n      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RLRestApi}/*/POST/api/v1/context'\n\n  # CloudWatch Alarms\n  LambdaErrorAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmName: !Sub ${AWS::StackName}-lambda-errors\n      AlarmDescription: Alarm if Lambda function has errors\n      MetricName: Errors\n      Namespace: AWS/Lambda\n      Dimensions:\n        - Name: FunctionName\n          Value: !Ref RLRestApiFunction\n      Statistic: Sum\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: 1\n      ComparisonOperator: GreaterThanOrEqualToThreshold\n      TreatMissingData: notBreaching\n      AlarmActions: !If [HasAlarmEmail, [!Ref ErrorAlarmTopic], !Ref \"AWS::NoValue\"]\n\n  LambdaDurationAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmName: !Sub ${AWS::StackName}-lambda-duration\n      AlarmDescription: Alarm if Lambda function duration exceeds 90% of timeout\n      MetricName: Duration\n      Namespace: AWS/Lambda\n      Dimensions:\n        - Name: FunctionName\n          Value: !Ref RLRestApiFunction\n      Statistic: Maximum\n      Period: 60\n      EvaluationPeriods: 3\n      Threshold: 27000 # 90% of 30 seconds (in ms)\n      ComparisonOperator: GreaterThanThreshold\n      TreatMissingData: notBreaching\n      AlarmActions: !If [HasAlarmEmail, [!Ref ErrorAlarmTopic], !Ref \"AWS::NoValue\"]\n\n  LambdaThrottleAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmName: !Sub ${AWS::StackName}-lambda-throttles\n      AlarmDescription: Alarm if Lambda function is being throttled\n      MetricName: Throttles\n      Namespace: AWS/Lambda\n      Dimensions:\n        - Name: FunctionName\n          Value: !Ref RLRestApiFunction\n      Statistic: Sum\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: 1\n      ComparisonOperator: GreaterThanOrEqualToThreshold\n      TreatMissingData: notBreaching\n      AlarmActions: !If [HasAlarmEmail, [!Ref ErrorAlarmTopic], !Ref \"AWS::NoValue\"]\n\n  ApiGateway5xxAlarm:\n    Type: AWS::CloudWatch::Alarm\n    Properties:\n      AlarmName: !Sub ${AWS::StackName}-api-5xx-errors\n      AlarmDescription: Alarm if API Gateway returns 5xx errors\n      MetricName: 5XXError\n      Namespace: AWS/ApiGateway\n      Dimensions:\n        - Name: ApiName\n          Value: !Ref RLRestApi\n        - Name: Stage\n          Value: !Ref Environment\n      Statistic: Sum\n      Period: 60\n      EvaluationPeriods: 1\n      Threshold: 2\n      ComparisonOperator: GreaterThanOrEqualToThreshold\n      TreatMissingData: notBreaching\n      AlarmActions: !If [HasAlarmEmail, [!Ref ErrorAlarmTopic], !Ref \"AWS::NoValue\"]\n\n  # SNS Topic for Alarms (if email is provided)\n  ErrorAlarmTopic:\n    Type: AWS::SNS::Topic\n    Condition: HasAlarmEmail\n    Properties:\n      DisplayName: !Sub ${AWS::StackName} Error Alarms\n      TopicName: !Sub ${AWS::StackName}-error-alarms\n      Subscription:\n        - Endpoint: !Ref AlarmEmail\n          Protocol: email\n\n  # CloudWatch Dashboard\n  RLDashboard:\n    Type: AWS::CloudWatch::Dashboard\n    Properties:\n      DashboardName: !Sub ${AWS::StackName}-dashboard\n      DashboardBody: !Sub |\n        {\n          \"widgets\": [\n            {\n              \"type\": \"metric\",\n              \"x\": 0,\n              \"y\": 0,\n              \"width\": 12,\n              \"height\": 6,\n              \"properties\": {\n                \"metrics\": [\n                  [ \"AWS/Lambda\", \"Invocations\", \"FunctionName\", \"${RLRestApiFunction}\" ],\n                  [ \".\", \"Errors\", \".\", \".\" ],\n                  [ \".\", \"Throttles\", \".\", \".\" ]\n                ],\n                \"view\": \"timeSeries\",\n                \"stacked\": false,\n                \"region\": \"${AWS::Region}\",\n                \"title\": \"Lambda Invocations, Errors, and Throttles\",\n                \"period\": 300\n              }\n            },\n            {\n              \"type\": \"metric\",\n              \"x\": 12,\n              \"y\": 0,\n              \"width\": 12,\n              \"height\": 6,\n              \"properties\": {\n                \"metrics\": [\n                  [ \"AWS/Lambda\", \"Duration\", \"FunctionName\", \"${RLRestApiFunction}\", { \"stat\": \"Average\" } ],\n                  [ \"...\", { \"stat\": \"Maximum\" } ],\n                  [ \"...\", { \"stat\": \"Minimum\" } ]\n                ],\n                \"view\": \"timeSeries\",\n                \"stacked\": false,\n                \"region\": \"${AWS::Region}\",\n                \"title\": \"Lambda Duration\",\n                \"period\": 300\n              }\n            },\n            {\n              \"type\": \"metric\",\n              \"x\": 0,\n              \"y\": 6,\n              \"width\": 12,\n              \"height\": 6,\n              \"properties\": {\n                \"metrics\": [\n                  [ \"AWS/ApiGateway\", \"Count\", \"ApiName\", \"${RLRestApi}\", \"Stage\", \"${Environment}\", \"Resource\", \"/api/v1/context\", \"Method\", \"POST\" ],\n                  [ \".\", \"4XXError\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\" ],\n                  [ \".\", \"5XXError\", \".\", \".\", \".\", \".\", \".\", \".\", \".\", \".\" ]\n                ],\n                \"view\": \"timeSeries\",\n                \"stacked\": false,\n                \"region\": \"${AWS::Region}\",\n                \"title\": \"API Gateway Requests and Errors\",\n                \"period\": 300\n              }\n            },\n            {\n              \"type\": \"metric\",\n              \"x\": 12,\n              \"y\": 6,\n              \"width\": 12,\n              \"height\": 6,\n              \"properties\": {\n                \"metrics\": [\n                  [ \"AWS/ApiGateway\", \"Latency\", \"ApiName\", \"${RLRestApi}\", \"Stage\", \"${Environment}\", \"Resource\", \"/api/v1/context\", \"Method\", \"POST\", { \"stat\": \"Average\" } ],\n                  [ \"...\", { \"stat\": \"p90\" } ],\n                  [ \"...\", { \"stat\": \"Maximum\" } ]\n                ],\n                \"view\": \"timeSeries\",\n                \"stacked\": false,\n                \"region\": \"${AWS::Region}\",\n                \"title\": \"API Gateway Latency\",\n                \"period\": 300\n              }\n            }\n          ]\n        }\n\nConditions:\n  HasAlarmEmail: !Not [!Equals [!Ref AlarmEmail, \"\"]]\n\nOutputs:\n  ApiEndpoint:\n    Description: API Gateway endpoint URL\n    Value: !Sub https://${RLRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/v1/context\n  \n  ApiId:\n    Description: API Gateway ID\n    Value: !Ref RLRestApi\n\n  ApiKey:\n    Description: API Key for accessing the API\n    Value: !Ref ApiKey\n    \n  LambdaArn:\n    Description: ARN of the Lambda function\n    Value: !GetAtt RLRestApiFunction.Arn\n    \n  CloudWatchDashboard:\n    Description: URL to CloudWatch Dashboard\n    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${RLDashboard}\n    \n  LambdaLogGroup:\n    Description: CloudWatch Log Group for Lambda function\n    Value: !Sub /aws/lambda/${RLRestApiFunction} "
