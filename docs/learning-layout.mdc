# Learning Layout Rules

## 🎯 Core Layout Structure
```css
.app-container {
    /* Core container with viewport constraints */
    width: 95vw;
    height: 85vh;
    max-width: var(--embed-width, 1200px);
    max-height: var(--embed-height, 800px);
    margin: 0 auto;
    overflow: hidden;
}

.header-bar {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: var(--header-height);
    z-index: 100;
    background: var(--primary-color);
}
```

## 📐 Layout Variables
```css
:root {
    /* Dimensions */
    --nav-width: 20%;
    --content-width: 80%;
    --embed-width: 1200px;
    --embed-height: 800px;
    --header-height: 40px;
    --footer-height: 60px;
    --chat-input-height: 60px;
    --learning-area-max-width: 800px;
    --learning-area-max-height: 85vh;
    --sidebar-width: 250px;
    --form-group-spacing: 1.5rem;
    --content-padding: 2rem;
    
    /* Spacing */
    --page-margin: 20px;
    --chat-button-size: 40px;
    --play-button-size: 40px;
    
    /* Colors */
    --primary-color: #425563;
    --secondary-color: #E87722;
    --tertiary-color: #4fa997;
    --background-color: #f9f9f9;
    --text-color: #2b2b2b;
    --cta-text-color: #ffffff;
    --border-color: #eee;
}
```

## 🏗️ Component Structure
```
app-container/
├── app-header/ (from page_ingredients/layout/header.html)
│   └── header-logo
├── main-container/
│   ├── left-nav/ (from page_ingredients/layout/sidebar.html)
│   │   ├── nav-tab[welcome]
│   │   ├── nav-tab[interview]
│   │   └── nav-tab[tools]
│   └── content-area/
│       ├── welcome-section/
│       │   └── form-container (from page_ingredients/forms/*.html)
│       ├── interview-section/
│       │   ├── chat-container (from page_ingredients/chat/container.html)
│       │   └── interaction-container
│       └── tools-section/
└── app-footer/ (from page_ingredients/layout/footer.html)
```

## 📱 Responsive Rules
1. Default (Desktop):
   ```css
   .app-container {
       width: 95vw;
       height: 85vh;
   }
   .chat-window {
       max-height: calc(100vh - 140px);
       height: calc(100% - var(--chat-input-height));
       overflow-y: auto;
   }
   .input-area {
       position: fixed;
       bottom: 0;
       width: 100%;
       max-width: 700px;
       height: var(--chat-input-height);
   }
   ```

2. Embedded Mode:
   ```css
   .embedded .app-header,
   .embedded .top-banner {
       display: none !important;
   }
   .embedded .app-container {
       height: 100vh;
       margin: 0;
   }
   ```

3. Live Mode:
   ```css
   /* Collapsed navigation */
   .live .left-nav {
       width: 60px;
   }
   .live .content-area {
       width: calc(100% - 60px);
   }
   ```

## 🎨 Style Rules
1. Typography:
   ```css
   :root {
       --client-font-h1: 'Arial, sans-serif';
       --client-font-h2: 'Arial, sans-serif';
       --client-font-body: 'Arial, sans-serif';
       --client-font-size-h1: 28px;
       --client-font-size-h2: 24px;
       --client-font-size-body: 16px;
   }
   ```

2. Interactions:
   ```css
   .interaction-button {
       width: var(--chat-button-size);
       height: var(--chat-button-size);
       border-radius: 50%;
   }
   ```

## 🔒 Layout Constraints
1. Navigation:
   - Left nav must maintain consistent width
   - Tabs must preserve order: Welcome → Interview → Tools
   - Disabled states must be visually distinct

2. Content Area:
   - Must support both form and chat interfaces
   - Chat container must scroll independently
   - Footer must stay fixed at bottom

3. Embedded Mode:
   - Must adapt to container dimensions
   - Must hide header/footer when embedded
   - Must preserve functionality without branding

## 📝 Implementation Notes
1. File Structure:
   ```
   /shared/admin/
   ├── page_ingredients/
   │   ├── layout/
   │   │   ├── header.html
   │   │   ├── sidebar.html
   │   │   └── footer.html
   │   ├── forms/
   │   │   ├── welcome_affirmations.html
   │   │   └── goalsetter_welcome.html
   │   └── chat/
   │       └── container.html
   ├── css/
   │   └── layout.css
   └── js/
       └── layout.js
   ```

2. Component Integration:
   - All partials use CSS variables for theming
   - Forms include validation and state management
   - Chat container handles message display and input
   - Layout components maintain consistent structure

3. Accessibility:
   - All components include ARIA labels
   - Navigation uses proper roles and states
   - Forms include proper validation feedback
   - Chat includes live region for messages

## ⚠️ Common Issues
1. Height Calculation:
   - Use `min-height: 0` on flex containers
   - Account for header/footer in calculations
   - Handle overflow properly in chat container

2. Embedding:
   - Test in various container sizes
   - Ensure responsive behavior
   - Verify state persistence

3. Navigation:
   - Maintain tab state during navigation
   - Handle disabled states correctly
   - Preserve order in all modes 

## Core Principles

1. **Constrained Learning Area**
   - Maximum width: 800px
   - Maximum visible height: 85vh
   - Optimal reading width: 65-75 characters
   - Vertical scrolling allowed, horizontal never

2. **Progressive Disclosure**
   - Show only relevant content
   - Minimize when not in focus
   - Use left nav for section breakdown
   - Collapse completed sections

## Form Management

1. **Long Forms Strategy**
   ```
   Instead of:
   [Welcome]
   [Standards Form - Long]
   [Goals Form - Long]
   [Review Form - Long]

   Use:
   Left Nav:          Content Area:
   [Welcome]          [Current Section]
   [Standards]        [Focused Content]
   ├── URL           [Clear Constraints]
   ├── Context
   [Goals]
   ├── Current
   ├── Future
   [Review]
   ```

2. **Active Area Rules**
   - One primary action visible at a time
   - Maximum 3 form fields in view
   - Progressive validation
   - Sticky navigation controls

3. **Minimization Patterns**
   ```css
   /* Completed section */
   .form-group.minimized {
       padding: 0.75rem;
       background: var(--bg-color);
       opacity: 0.7;
   }

   /* Active section */
   .form-group.active {
       padding: 1.5rem;
       background: white;
       box-shadow: 0 2px 4px rgba(0,0,0,0.1);
   }
   ```

4. **Header Management**
   - Compact on scroll
   - Hide when form gets crowded
   - Maintain context in nav

## Responsive Behavior

1. **Form Sections**
   ```css
   .expandable-section {
       max-height: 0;
       overflow: hidden;
       opacity: 0;
       transition: 0.3s ease-out;
   }

   .expandable-section.expanded {
       max-height: 500px;
       opacity: 1;
   }
   ```

2. **Navigation Controls**
   ```css
   .nav-controls {
       position: sticky;
       bottom: 0;
       background: white;
       padding: 1rem;
       box-shadow: 0 -2px 4px rgba(0,0,0,0.05);
   }
   ```

## Best Practices

1. **Form Organization**
   - Break long forms into logical sub-sections
   - Use left nav for section hierarchy
   - Show progress in nav items
   - Keep active area focused

2. **Visual Hierarchy**
   - Active section gets full visibility
   - Completed sections minimize
   - Future sections hidden or disabled
   - Clear visual progression

3. **Space Management**
   ```
   [Header] - Compact when scrolling
   [Content]
   ├── Active Section (Full height)
   ├── Minimized Sections (Compact)
   └── [Sticky Nav] - Always accessible
   ```

4. **Scroll Strategy**
   - Allow vertical scroll within constraints
   - Sticky progress indicator
   - Sticky navigation controls
   - Smooth transitions between sections

## Implementation Example

```html
<div class="learning-container">
    <nav class="section-nav">
        <div class="nav-item">
            Welcome
            <div class="sub-items">
                <!-- Sub-sections -->
            </div>
        </div>
    </nav>

    <main class="learning-area">
        <div class="progress-bar sticky">
            <!-- Progress -->
        </div>

        <div class="active-section">
            <!-- Current focus -->
        </div>

        <div class="nav-controls sticky">
            <!-- Navigation -->
        </div>
    </main>
</div>
```

## Validation

- [ ] Content fits within 800px width
- [ ] Active section visible without scrolling
- [ ] Navigation always accessible
- [ ] Clear visual hierarchy
- [ ] Smooth transitions between states
- [ ] Proper use of minimization
- [ ] Effective use of left nav for breakdown 

## 🔌 API Integration

1. **Request Structure**
   ```javascript
   // Goal Setter Format
   {
     "intake_token": "goalsetter_chat",
     "name": "string",
     "email": "string",
     "user_id": "string",
     "thread_id": "string",
     "assistant_id": "string",
     "subject_and_grade": "string",
     "learning_target": "string",
     "measure_of_success": "string",
     "classroom_goal_statement": "string",
     "org_id": "string",
     "source": "string",
     "url": "string"
   }

   // Standard Chat Format
   {
     "User_ID": "string",
     "Org_ID": "string",
     "Assistant_ID": "string",
     "Thread_ID": "string",
     "message": "string",
     "url": "string"
   }
   ```

2. **URL Context Modes**
   - `*_live.html`: Production end-user interface
   - `*_temp.html`: Development/testing interface
   - `*_review.html`: Review/feedback interface
   - `*.html`: Production interface

3. **Form Integration**
   ```javascript
   // Form submission handler
   async function submitForm(formData) {
     const response = await fetch('https://e7mu4gwsvh.execute-api.us-east-2.amazonaws.com/chat', {
       method: 'POST',
       headers: {
         'Content-Type': 'application/json',
         'Origin': 'https://recursivelearning.app'
       },
       body: JSON.stringify({
         intake_token: "goalsetter_chat",
         ...formData,
         url: window.location.href
       })
     });
     return response.json();
   }
   ```

4. **State Management**
   - Store thread_id for conversation continuity
   - Track form progress in URL context
   - Maintain user/org context across pages
   - Handle error states gracefully

5. **Security**
   - Validate CORS headers
   - Sanitize user input
   - Handle API errors
   - Maintain session state

- [ ] API integration tests pass
- [ ] CORS headers properly set
- [ ] Error handling implemented
- [ ] State persistence verified 