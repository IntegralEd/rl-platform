# LMS Admin System Build Phases

## 📱 Phase 1: MVP Directory Panel
Current implementation in index.html providing core page management.

### Features
- [x] Page state management (prod/review/temp)
- [x] Temp URL configuration
- [x] Display settings control
- [x] State persistence (localStorage)

### Limitations
- Single admin view for all clients
- Basic URL/display controls only
- No role-based access
- Limited to index.html context

## 🎯 Phase 2: Dedicated Admin Portal

### Core Structure
```
/admin/
├── index.html           # Admin dashboard
├── clients/            # Client-specific admin
│   ├── {client}/      # Per-client settings
│   │   ├── pages/     # Page management
│   │   ├── forms/     # Form configuration
│   │   └── auth/      # Access rules
└── shared/            # Common components
```

### Features
- [ ] Dedicated admin interface
- [ ] Client-specific sections
- [ ] Enhanced state management
- [ ] Review process tools
- [ ] Form builder interface

### State Schema
```javascript
{
    clients: {
        [clientId]: {
            pages: {
                [pageId]: {
                    status: 'prod|review|temp',
                    tempUrl: string,
                    display: {
                        width: string,
                        height: string,
                        responsive: boolean
                    },
                    forms: {
                        [formId]: {
                            fields: [{
                                id: string,
                                label: string,
                                type: string,
                                mapping: string // e.g. "Intake_Context_01"
                            }]
                        }
                    }
                }
            },
            auth: {
                rules: [{
                    pattern: string,
                    role: string,
                    access: 'view|edit|admin'
                }]
            }
        }
    }
}
```

## 🚀 Phase 3: Softr Integration

### Authentication
- [ ] Role-based access control
- [ ] Client domain validation
- [ ] Admin role hierarchy
- [ ] Session management

### Integration Points
```javascript
// Softr auth integration
const AdminAuth = {
    validateAccess: async (clientId, pageId) => {
        const user = await Softr.getCurrentUser();
        const roles = await Softr.getUserRoles();
        return AdminRules.checkAccess(user, roles, clientId, pageId);
    }
};
```

## 🎨 Phase 4: Visual Builder

### Form Builder
- [ ] Drag-and-drop interface
- [ ] Field mapping system
- [ ] Template library
- [ ] Preview mode

### Auth Rule Builder
- [ ] Visual rule creator
- [ ] Role assignment
- [ ] Access pattern testing
- [ ] Validation preview

### Template System
```javascript
// Dynamic form mapping
const FormBuilder = {
    mapField: (clientField, genericField) => ({
        source: clientField.id,
        target: genericField, // e.g. "Intake_Context_01"
        transform: (value) => ({
            // Transform client-specific data to generic format
            value,
            metadata: {
                originalField: clientField.id,
                mappedTo: genericField,
                clientId: clientField.clientId
            }
        })
    })
};
```

## 📊 Phase 5: Analytics & Monitoring

### Review Process
- [ ] Comment tracking
- [ ] Review status dashboard
- [ ] Change history
- [ ] Approval workflow

### Usage Metrics
- [ ] Page performance
- [ ] Form completion rates
- [ ] Error tracking
- [ ] User engagement

## 🔧 Implementation Strategy

### 1. MVP Enhancement (Current)
- [ ] Add client section headers
- [ ] Improve state management
- [ ] Add basic role checks
- [ ] Enhance temp page controls

### 2. Admin Portal Migration
- [ ] Create admin/ directory
- [ ] Move state management
- [ ] Add client isolation
- [ ] Implement basic form tools

### 3. Softr Integration
- [ ] Add auth wrapper
- [ ] Implement role system
- [ ] Create admin dashboard
- [ ] Add client domains

### 4. Builder Tools
- [ ] Form builder UI
- [ ] Auth rule editor
- [ ] Template system
- [ ] Preview system

## 📝 Data Architecture

### Form Field Mapping
```javascript
{
    "fieldMappings": {
        "st_standards_link": "Intake_Context_01",
        "st_reflection_text": "Intake_Context_02",
        "elpl_prior_learning": "Intake_Context_01"
    }
}
```

### Client Configuration
```javascript
{
    "clientConfig": {
        "st": {
            "forms": {
                "goalsetter": {
                    "requiredFields": ["standards", "reflection"],
                    "conditionalLogic": {
                        "standardsChoice": {
                            "yes": ["standardsLink", "standardsDetail"],
                            "no": []
                        }
                    }
                }
            }
        }
    }
}
```

## 🔐 Security Considerations

### Role Hierarchy
```
SuperAdmin
  └─ ClientAdmin
      └─ PageAdmin
          └─ FormAdmin
              └─ Reviewer
```

### Access Patterns
- Domain-based validation
- Role-based permissions
- Action auditing
- State validation

## 📈 Success Metrics

### Short Term (MVP)
- Page state reliability
- Temp page usability
- State persistence
- Error handling

### Long Term
- Client adoption rate
- Form completion rate
- Review efficiency
- Builder tool usage

## 🎯 Next Steps

1. Current MVP
   - [ ] Enhance state management
   - [ ] Add basic role checks
   - [ ] Improve temp controls

2. Portal Preparation
   - [ ] Design admin structure
   - [ ] Plan state migration
   - [ ] Create base templates

3. Documentation
   - [ ] Admin guide
   - [ ] Builder documentation
   - [ ] Integration guide
   - [ ] Security protocols 