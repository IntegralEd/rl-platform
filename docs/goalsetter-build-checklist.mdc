# Goalsetter Build Checklist

## 🎯 Current State
```
/clients/st/
├── goalsetter.html      # Core file (20KB)
├── goalsetter_live.html # Live version (9.4KB) - READ ONLY
├── goalsetter_temp.html # Temp version (2.8KB)
└── goalsetter_review.html # Review version (2.8KB) - READ ONLY
```

## 🔄 Phase 1: Core Cleanup (Steps 1-6)
```javascript
// Expected structure
const Goalsetter = {
    welcome: {},    // Welcome section
    interview: {},  // Interview flow
    chat: {},      // Chat interface
    tools: {}      // Tools section
}
```

### Cleanup Tasks
- [ ] Remove Chatbase iframe from center slide
- [ ] Restore welcome message
- [ ] Fix interview flow
- [ ] Clean up unused code
- [ ] Update state management
- [ ] Add health checks

🛑 DECISION POINT 1: Core functionality
Options:
1. Continue if all tests pass
2. Fix any broken flows
3. Request human review

## 🔍 Phase 2: Read-Only Admin Features (Steps 7-12)
```javascript
// Admin Features (Read-Only)
const AdminFeatures = {
    copyUrl: {
        description: 'Copy page URL to clipboard',
        requiresAuth: false
    },
    launch: {
        description: 'Open page in new tab',
        requiresAuth: false
    },
    viewInfo: {
        description: 'View page information',
        requiresAuth: false
    },
    viewMetrics: {
        description: 'View page metrics',
        requiresAuth: false
    }
}
```

### Implementation
- [ ] Add URL copy functionality
- [ ] Implement page launch
- [ ] Create info display
- [ ] Add metrics view
- [ ] Implement validation
- [ ] Add warning messages

🛑 DECISION POINT 2: Admin feature validation
Options:
1. Proceed if validation passes
2. Fix any issues
3. Request human review

## 🎨 Phase 3: UI Enhancement (Steps 13-18)
```javascript
// UI components (Read-Only)
const UI = {
    welcome: {
        show: () => {},
        hide: () => {},
        update: () => {}
    },
    chat: {
        show: () => {},
        hide: () => {},
        update: () => {}
    }
}
```

### Features
- [ ] Add loading states
- [ ] Implement transitions
- [ ] Add error handling
- [ ] Create feedback system
- [ ] Add accessibility
- [ ] Implement responsive design

🛑 DECISION POINT 3: UI stability
Options:
1. Continue if UI tests pass
2. Fix any visual issues
3. Request human review

## 📈 Phase 4: Monitoring Integration (Steps 19-25)
```javascript
// Monitoring hooks (Read-Only)
const Monitor = {
    checkHealth: async () => {},
    captureState: async () => {},
    reportIssues: async () => {},
    trackMetrics: async () => {}
}
```

### Implementation
- [ ] Add health checks
- [ ] Implement state tracking
- [ ] Create issue reporting
- [ ] Add performance metrics
- [ ] Implement alerts
- [ ] Create reports
- [ ] Add Qipu integration

🛑 FINAL DECISION POINT
Options:
1. Deploy if all tests pass
2. Run extended tests
3. Request human review

## 🧪 Test Scenarios
```javascript
describe('Goalsetter', () => {
    test('should handle state transitions', async () => {
        const goalsetter = new Goalsetter();
        await goalsetter.setState('temp');
        expect(goalsetter.getState()).toBe('temp');
    });
    
    test('should prevent live page modifications', () => {
        const page = 'goalsetter_live.html';
        expect(VALIDATION_RULES.validateLivePage(page).constraints.adminFunctions).toBe(false);
    });
});
```

## 📝 Success Criteria
- All pages load < 2s
- State transitions < 100ms
- Zero console errors
- 100% accessibility score
- All tests passing
- No modifications to _live.html pages

## 🚨 Abort Conditions
1. State corruption
2. UI breaking
3. Performance degradation
4. Accessibility issues
5. Test failures
6. Attempted live page modification

## 📊 Metrics Collection
```javascript
const metrics = {
    collect: async () => ({
        loadTime: performance.now(),
        stateTransitions: Goalsetter.getTransitionCount(),
        errors: Goalsetter.getErrorCount(),
        accessibility: await a11y.getScore()
    })
}
```

## 🔄 Rollback Plan
1. Keep version history
2. Store state snapshots
3. Maintain UI backups
4. Track changes

## 👥 Human Review Triggers
1. State inconsistencies
2. UI regressions
3. Performance issues
4. Accessibility concerns
5. Test failures
6. Live page modification attempts 

## Layout Compliance
- [ ] Viewport-based container (95vw/85vh)
- [ ] Fixed header with z-index 100
- [ ] Dynamic chat window height
- [ ] Fixed input area positioning
- [ ] Loading state animations
- [ ] Responsive embedded mode

## State Management
- [ ] Thread ID tracking
- [ ] Message count tracking
- [ ] Tab state persistence
- [ ] Navigation state validation

## Logging Implementation
- [ ] Session initialization logs
- [ ] Message tracking logs
- [ ] Error handling logs
- [ ] State change logs

## Testing Requirements
- [ ] Viewport responsiveness
- [ ] Embedded mode functionality
- [ ] Chat persistence
- [ ] Navigation state preservation
- [ ] Loading state transitions

## Performance Metrics
- [ ] Layout render time < 100ms
- [ ] Chat response time < 2s
- [ ] Animation smoothness 60fps
- [ ] No layout shifts during loading

## Documentation
- [x] Layout rules updated
- [x] Logging patterns documented
- [ ] State management flows
- [ ] Error handling procedures

## Migration Notes
- [x] BHB layout patterns integrated
- [x] Logging standards adopted
- [ ] Navigation flow updated
- [ ] Chat UI modernized 

## Directory Structure
```
/clients/st/goalsetter/
├── goalsetter.html           # Main template
├── goalsetter_review.html    # Review version
├── goalsetter_live.html      # Live version
├── goalsetter_embed.html     # Embed version
└── assets/
    ├── css/
    │   ├── st-variables.css  # ST brand variables
    │   └── st-custom.css     # Custom styles
    ├── js/
    │   └── st-goalsetter-auth.js  # Auth logic
    └── images/
        └── ST TH Powered By White Logo.png
```

## Asset Setup

1. **CSS Files**
   - [ ] Create `/clients/st/goalsetter/assets/css/st-variables.css`
     ```css
     :root {
         --st-primary: #425563;
         --st-secondary: #E87722;
         --st-background: #f9f9f9;
         --st-text: #333;
     }
     ```
   - [ ] Create `/clients/st/goalsetter/assets/css/st-custom.css`
     ```css
     /* Custom styles for GoalSetter */
     .goalsetter-container {
         background: var(--st-background);
         color: var(--st-text);
     }
     ```

2. **JavaScript**
   - [ ] Create `/clients/st/goalsetter/assets/js/st-goalsetter-auth.js`
     ```javascript
     // Auth logic for GoalSetter
     const auth = {
         init: () => {
             console.log('GoalSetter auth initialized');
         }
     };
     ```

3. **Images**
   - [ ] Add logo to `/clients/st/goalsetter/assets/images/`
   - [ ] Verify logo path in HTML: `assets/images/ST TH Powered By White Logo.png`

## HTML Template Setup

1. **Base Template**
   ```html
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>GoalSetter</title>
       <link rel="stylesheet" href="assets/css/st-variables.css">
       <link rel="stylesheet" href="assets/css/st-custom.css">
   </head>
   <body>
       <div class="goalsetter-container">
           <!-- Content -->
       </div>
       <script src="assets/js/st-goalsetter-auth.js"></script>
   </body>
   </html>
   ```

2. **Version Files**
   - [ ] Create goalsetter_review.html
   - [ ] Create goalsetter_live.html
   - [ ] Create goalsetter_embed.html

## Admin Panel Setup

1. **Admin Template**
   - [ ] Create `/admin/pages/st/goalsetter/goalsetter_admin.html`
   - [ ] Link to client pages
   - [ ] Add version controls

2. **Admin Assets**
   - [ ] Add admin-specific styles
   - [ ] Add admin-specific scripts

## Testing Checklist

1. **Asset Loading**
   - [ ] CSS files load without 404s
   - [ ] JavaScript files load without 404s
   - [ ] Images load without 404s

2. **Version Testing**
   - [ ] Review version loads correctly
   - [ ] Live version loads correctly
   - [ ] Embed version loads correctly

3. **Admin Testing**
   - [ ] Admin panel loads correctly
   - [ ] Version controls work
   - [ ] Settings save correctly

## Deployment Steps

1. **Asset Deployment**
   - [ ] Upload CSS files
   - [ ] Upload JavaScript files
   - [ ] Upload images

2. **Template Deployment**
   - [ ] Deploy main template
   - [ ] Deploy version files
   - [ ] Deploy admin panel

3. **Post-Deployment**
   - [ ] Verify all assets load
   - [ ] Test all versions
   - [ ] Test admin controls 

## 🏗️ Structure
- [ ] Implement constrained learning area (800px max width)
- [ ] Add sticky navigation controls
- [ ] Break form into logical sub-sections
- [ ] Implement progressive disclosure
- [ ] Add visual hierarchy for active/minimized sections

## 🔌 API Integration
- [ ] Implement form submission handler
- [ ] Add state management for thread_id
- [ ] Handle API errors gracefully
- [ ] Validate CORS headers
- [ ] Test all URL context modes (_live, _temp, _review)

## 📱 Responsive Design
- [ ] Test constrained layout on all breakpoints
- [ ] Verify sticky controls behavior
- [ ] Test form field visibility
- [ ] Validate scroll behavior
- [ ] Check header compaction

## 🎯 Form Features
- [ ] Implement section validation
- [ ] Add progress tracking
- [ ] Handle form state persistence
- [ ] Add error feedback
- [ ] Test form submission flow

## 🔒 Security
- [ ] Sanitize user input
- [ ] Validate API responses
- [ ] Handle session state
- [ ] Test error scenarios
- [ ] Verify CORS configuration

## 📊 Testing
- [ ] Test all form sections
- [ ] Verify API integration
- [ ] Check responsive behavior
- [ ] Validate error handling
- [ ] Test state persistence

## 🎨 UI/UX
- [ ] Implement visual hierarchy
- [ ] Add smooth transitions
- [ ] Verify navigation flow
- [ ] Test form feedback
- [ ] Check accessibility

## 📝 Documentation
- [ ] Update API integration guide
- [ ] Document state management
- [ ] Add error handling guide
- [ ] Update testing procedures
- [ ] Document layout constraints 