# Porting Checklist from Recursive-Learning ✅

## Stage 1: Core Layout & Structure ✅
- [x] Port learning-layout.mdc rules
  - AI Check: Verify all layout classes and structure match
  - Human Check: Test responsive behavior across devices
- [x] Implement header/nav/footer
  - AI Check: Validate CSS variable usage
  - Human Check: Test navigation flow and state persistence
- [x] Set up CSS variable system
  - AI Check: Verify all theme variables are defined
  - Human Check: Test theme switching and contrast modes

## Stage 2: Authentication & State ✅
- [x] Implement Record_ID/Org_ID auth
  - AI Check: Validate URL parameter handling
  - Human Check: Test session persistence and security
- [x] Add thread management
  - AI Check: Verify thread creation/retrieval logic
  - Human Check: Test thread persistence across sessions
- [x] Set up webhook configuration
  - AI Check: Validate payload structure
  - Human Check: Test webhook responses and error handling

## Stage 3: Chat Integration ✅
- [x] Port chat.js functionality
  - AI Check: Verify message handling and state updates
  - Human Check: Test chat flow and error recovery
- [x] Add fallback assistant
  - AI Check: Validate fallback triggers
  - Human Check: Test assistant handoff scenarios

## Stage 4: Form & Review ✅
- [x] Port form validation
  - AI Check: Verify validation rules and messages
  - Human Check: Test form submission and error states
- [x] Implement review mode
  - AI Check: Validate review data structure
  - Human Check: Test review flow and export options

## Stage 5: Tools & Features ✅
- [x] Add poster generation
  - AI Check: Verify template rendering
  - Human Check: Test poster generation and download
- [x] Implement goal templates
  - AI Check: Validate template structure
  - Human Check: Test template application and editing

## Stage 6: Testing & Validation ✅
- [x] Add test cases
  - AI Check: Verify test coverage
  - Human Check: Run integration tests

## Summary
All components have been successfully ported and integrated into the new structure. The learning layout rules have been updated to reflect the new partials system. We can now move on to the goalsetter checklist.

## Final Payload Test (Stage 7)
- [ ] Webhook Integration
  - AI Check: Validate payload structure matches:
    ```javascript
    {
      user_data: {
        name: string,
        email: string,
        user_id: string,
        thread_id: string,
        assistant_id: string,
        org_id: string,
        intake_token: string,
        source: string,
        url: string,
        is_anonymous: boolean
      },
      document_data: {
        subject_and_grade: string,
        learning_target: string,
        measure_of_success: string,
        classroom_goal_statement: string
      },
      form_data: {
        standards: {
          consider: boolean,
          link: string,
          details: string
        }
      }
    }
    ```
  - Human Check: Test webhook response handling and error states

- [ ] End-to-End Validation
  - AI Check: Verify all data points are collected
  - Human Check: Test complete flow from form to webhook

- [ ] Qipu Integration
  - AI Check: Validate monitoring setup
  - Human Check: Test state capture and reporting

## Validation Process
1. AI First:
   - Run automated checks
   - Validate code structure
   - Check for consistency
   - Verify dependencies

2. Human Second:
   - Test user flows
   - Verify visual consistency
   - Check accessibility
   - Validate performance

## Integration with Goalsetter
- Align with existing goalsetter checklist
- Ensure payload tests match recursive-learning capabilities
- Maintain backward compatibility
- Document any breaking changes

## Notes
- Each stage must pass both AI and human checks
- Document any deviations from original implementation
- Update goalsetter checklist as features are ported
- Maintain version control of ported features
- Final payload test must match goalsetter implementation exactly 