---
description: Rules for Redis API access patterns
globs: ["**/*.js", "**/*.ts"]
alwaysApply: true
---

# Redis API Access Patterns

## Overview
These rules define the standard patterns for accessing Redis in the Recursive Learning platform. They ensure consistent, performant, and secure data access across all components.

## Always Apply
- [ ] All Redis access must follow these patterns
- [ ] Deviations require explicit documentation and approval
- [ ] Changes to these rules must be version controlled

## Access Patterns
- [ ] Use consistent key naming convention:
  - `{client}:{project}:{type}:{id}`
  - Example: `st:goalsetter:user:123`
- [ ] Implement proper key expiration
  - Session data: 24 hours
  - Cache data: 1 hour
  - Temp data: 15 minutes
- [ ] Use appropriate data structures:
  - Strings for simple values
  - Hashes for object data
  - Sets for collections
  - Sorted sets for ranked data
  - Lists for queues

## Caching Rules
- [ ] Cache expensive computations
- [ ] Cache frequently accessed data
- [ ] Implement cache invalidation strategy
- [ ] Use cache versioning for updates
- [ ] Handle cache misses gracefully

## Performance
- [ ] Use pipelining for multiple operations
- [ ] Batch related operations
- [ ] Monitor memory usage
- [ ] Implement proper error handling
- [ ] Use appropriate serialization

## Security
- [ ] No sensitive data in keys
- [ ] Encrypt sensitive values
- [ ] Use role-based access control
- [ ] Implement rate limiting
- [ ] Monitor access patterns

## Implementation
```javascript
// Example key naming
const keyPattern = `${client}:${project}:${type}:${id}`;

// Example caching with expiration
await redis.set(key, value, 'EX', 3600); // 1 hour

// Example batch operations
const pipeline = redis.pipeline();
pipeline.hset(key1, field1, value1);
pipeline.hset(key2, field2, value2);
await pipeline.exec();
```

## Validation
These rules are enforced through:
1. Pre-commit hooks
2. CI/CD pipeline checks
3. Code review requirements
4. Automated testing 