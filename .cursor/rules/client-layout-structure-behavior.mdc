---
description: Rules for client layout structure and behavior, including Redis caching patterns
globs: ["clients/**/*.html", "clients/**/*.js", "clients/**/*.css"]
alwaysApply: true
---

# Client Layout Structure & Behavior Rules

## Overview
These rules define the standard structure and behavior for client pages across the Recursive Learning platform. They ensure consistency, maintainability, and proper functionality of client interfaces.

## Always Apply
- [ ] All client pages must follow these structural and behavioral patterns
- [ ] Deviations require explicit documentation and approval
- [ ] Changes to these rules must be version controlled

## Directory Structure
- [ ] Page-specific files must stay with their HTML page:
  ```
  /clients/{client}/{project}/
    ├── project.html
    └── assets/
        └── js/
            └── client-project-logic.js  # Controls this specific page
  ```
- [ ] Shared client assets must be in `/clients/{client}/assets/` for reuse:
  - JS files in `/assets/js/` (auth, routing, shared utilities)
  - CSS files in `/assets/css/` (shared styles)
  - Images in `/assets/images/` (shared icons, logos, SVGs)
  - Variables in `/assets/variables.css` (client-wide variables)
- [ ] Page ingredients must be in `/shared/page_ingredients/{ingredient}/`

## File Naming
- [ ] Client JavaScript files must be prefixed with `client-`
  - Example: `client-auth.js`, `client-router.js`
- [ ] Component files must use kebab-case
  - Example: `page-viewer.html`, `content-loader.html`
- [ ] Page files must include project and type
  - Example: `goalsetter-live.html`, `merit-review.html`

## Layout Structure
- [ ] Client pages must use the standard grid layout:
```html
<div class="client-layout">
  <header class="client-header">...</header>
  <main class="client-content">...</main>
  <footer class="client-footer">...</footer>
</div>
```

## Component System
- [ ] Components must be loaded via `client-component-loader.js`
- [ ] Components must use `data-client-component` attribute
- [ ] Components must handle their own loading states
- [ ] Components must implement error boundaries

## Page Navigation
- [ ] Use consistent URL patterns
- [ ] Support deep linking
- [ ] Handle browser navigation
- [ ] Preserve scroll position

## Required CSS Variables
```css
:root {
  --header-height: 60px;
  --footer-height: 40px;
  --client-bg: #ffffff;
  --client-text: #2c3e50;
  --client-border: #e1e4e8;
  --content-width: 1200px;
}
```

## Required Meta Tags
```html
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
```

## Required Scripts
```html
<script type="module" src="/shared/assets/js/client-component-loader.js"></script>
<script type="module" src="/shared/assets/js/client-auth.js"></script>
<script type="module" src="/shared/assets/js/client-router.js"></script>
```

## Version Display
- [ ] Must show version number
- [ ] Must show environment (live/review/temp)
- [ ] Format: `v1.0.0 (live)`

## Content Loading
- [ ] Must show loading states
- [ ] Must handle errors gracefully
- [ ] Must support dynamic imports
- [ ] Must cache loaded content

## Error Handling
- [ ] Must show user-friendly error messages
- [ ] Must log errors to console
- [ ] Must provide recovery options
- [ ] Must preserve navigation state

## Performance
- [ ] Must lazy load content
- [ ] Must cache appropriate resources
- [ ] Must optimize images
- [ ] Must minimize reflows/repaints

## Accessibility
- [ ] Must use semantic HTML
- [ ] Must include ARIA labels
- [ ] Must support keyboard navigation
- [ ] Must maintain focus management

## Security
- [ ] Must validate content sources
- [ ] Must sanitize dynamic content
- [ ] Must verify permissions
- [ ] Must protect against XSS

## State Management
- [ ] Must use consistent state patterns
- [ ] Must handle component lifecycle
- [ ] Must clean up resources
- [ ] Must preserve necessary state

## Testing Requirements
- [ ] Must include component tests
- [ ] Must verify error states
- [ ] Must test accessibility
- [ ] Must validate performance

## Documentation
- [ ] Must include JSDoc comments
- [ ] Must document component API
- [ ] Must maintain changelog
- [ ] Must update README

## Validation
These rules are enforced through:
1. Pre-commit hooks
2. CI/CD pipeline checks
3. Code review requirements
4. Automated testing 