---
description: Rules for admin layout structure and behavior
globs: ["admin/**/*.html", "admin/**/*.js", "admin/**/*.css"]
alwaysApply: true
---

# Admin Layout Structure & Behavior Rules

## Overview
These rules define the standard structure and behavior for admin pages across the Recursive Learning platform. They ensure consistency, maintainability, and proper functionality of admin interfaces.

## Always Apply
- [ ] All admin pages must follow these structural and behavioral patterns
- [ ] Deviations require explicit documentation and approval
- [ ] Changes to these rules must be version controlled

## Directory Structure
- [ ] Admin-specific assets must be in `/admin/assets/`
  - JS files in `/admin/assets/js/`
  - CSS files in `/admin/assets/css/`
  - Images in `/admin/assets/images/`
- [ ] Admin components must be in `/admin/components/`
- [ ] Admin pages must be in `/admin/pages/{client}/{project}/`
- [ ] Page ingredients must be in `/shared/page_ingredients/{ingredient}/`
  - Each ingredient in its own directory
  - Must include README.md with usage instructions
  - Must use consistent file naming within ingredient directory
  - Example: `/shared/page_ingredients/toggle/toggle.js`

## File Naming
- [ ] Admin JavaScript files must be prefixed with `admin-`
  - Example: `admin-auth.js`, `admin-router.js`
- [ ] Component files must use kebab-case
  - Example: `page-nav.js`, `content-editor.js`
- [ ] Page files must include project and admin suffix
  - Example: `goalsetter-admin.html`, `merit-admin.html`
- [ ] Ingredient files must match directory name
  - Example: `toggle/toggle.js`, `iframe/iframe.js`

## Page Ingredients
- [ ] All ingredients must be in `/shared/page_ingredients/`
- [ ] Each ingredient must be self-contained in its directory
- [ ] Must include:
  - README.md with usage instructions
  - Main implementation file matching directory name
  - Any additional resources (CSS, assets, etc.)
- [ ] Must support both admin and client usage
- [ ] Must implement standard ingredient interface
- [ ] Must handle their own loading states
- [ ] Must implement error boundaries

## Layout Structure
- [ ] Admin pages must use the standard grid layout:
```html
<div class="admin-layout">
  <header class="admin-header">...</header>
  <nav class="admin-page-nav">...</nav>
  <main class="admin-content">...</main>
</div>
```
- [ ] Navigation must include:
  - Header with title
  - Version display
  - Page navigation cards
- [ ] Content area must use ingredient loading system

## Component System
- [ ] Components must be loaded via `admin-component-loader.js`
- [ ] Components must use `data-admin-component` attribute
- [ ] Components must handle their own loading states
- [ ] Components must implement error boundaries

## Page Navigation
- [ ] Use consistent URL patterns
- [ ] Support deep linking
- [ ] Handle browser navigation
- [ ] Preserve scroll position

## JavaScript Modules
- [ ] Use ES6 modules with type="module"
- [ ] Import from absolute paths starting with `/admin/`
- [ ] Keep dependencies explicit
- [ ] Use consistent import ordering

## Styling
- [ ] Use CSS variables for theming
- [ ] Follow BEM naming convention
- [ ] Maintain responsive design
- [ ] Use grid/flexbox for layouts

## Required CSS Variables
```css
:root {
  --header-height: 60px;
  --nav-width: 260px;
  --admin-bg: #f4f5f7;
  --admin-text: #2c3e50;
  --admin-border: #e1e4e8;
  --content-width: 1200px;
}
```

## Required Meta Tags
```html
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
```

## Required Scripts
```html
<script type="module" src="/admin/assets/js/admin-component-loader.js"></script>
<script type="module" src="/admin/assets/js/admin-auth.js"></script>
<script type="module" src="/admin/assets/js/admin-router.js"></script>
```