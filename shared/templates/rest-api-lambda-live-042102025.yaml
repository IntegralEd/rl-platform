AWSTemplateFormatVersion: '2010-09-09'
Description: Recursive Learning REST API Lambda with API Gateway

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name
  S3Bucket:
    Type: String
    Description: S3 bucket for deployment artifacts
  AlarmEmail:
    Type: String
    Default: ''
    Description: Email address to notify when alarms are triggered (optional)

Resources:
  RLRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      Description: Recursive Learning REST API
      FailOnWarnings: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiResourceContext
      - ApiResourceMock
      - ApiMethodContextPost
      - ApiMethodMockGet
      - ApiMethodContextOptions
      - ApiMethodMockOptions
    Properties:
      RestApiId: !Ref RLRestApi
      Description: API deployment

  ApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiDeployment
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref RLRestApi
      StageName: !Ref Environment
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          MetricsEnabled: true
          DataTraceEnabled: true
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50

  ApiResourceContext:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !GetAtt RLRestApi.RootResourceId
      PathPart: api

  ApiResourceV1:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceContext
      PathPart: v1

  ApiResourceContextEndpoint:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: context

  ApiResourceMock:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: mock

  ApiResourceAssistant:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: assistant

  ApiResourceThread:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: thread

  ApiMethodContextPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceContextEndpoint
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RLRestApiFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiMethodContextOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceContextEndpoint
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Max-Age: "'7200'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiMethodMockGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceMock
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://recursivelearning.app'''
            ResponseTemplates:
              application/json: '{"message": "Mock response successful", "timestamp":
                "$context.requestTimeEpoch"}'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiMethodMockOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceMock
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://recursivelearning.app'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiMethodContextAll:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY  # Support all methods
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RLRestApiFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Credentials: true

  RLRestApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${Environment}/lambda.zip
      Handler: lambda_handler_integration.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/integraled/central/*
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ApiStage
    Properties:
      Name: !Sub ${AWS::StackName}-api-key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RLRestApi
          StageName: !Ref Environment

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiStage
    Properties:
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan
      Description: Usage plan for RL REST API
      ApiStages:
        - ApiId: !Ref RLRestApi
          Stage: !Ref Environment
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - UsagePlan
      - ApiKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RLRestApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RLRestApi}/*/POST/api/v1/context

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-errors
      AlarmDescription: Alarm if Lambda function has errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref RLRestApiFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If
        - HasAlarmEmail
        - - !Ref ErrorAlarmTopic
        - !Ref AWS::NoValue

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-duration
      AlarmDescription: Alarm if Lambda function duration exceeds 90% of timeout
      MetricName: Duration
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref RLRestApiFunction
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 3
      Threshold: 27000 # 90% of 30 seconds (in ms)
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If
        - HasAlarmEmail
        - - !Ref ErrorAlarmTopic
        - !Ref AWS::NoValue

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-throttles
      AlarmDescription: Alarm if Lambda function is being throttled
      MetricName: Throttles
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref RLRestApiFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If
        - HasAlarmEmail
        - - !Ref ErrorAlarmTopic
        - !Ref AWS::NoValue

  ApiGateway5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-api-5xx-errors
      AlarmDescription: Alarm if API Gateway returns 5xx errors
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value: !Ref RLRestApi
        - Name: Stage
          Value: !Ref Environment
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If
        - HasAlarmEmail
        - - !Ref ErrorAlarmTopic
        - !Ref AWS::NoValue

  # SNS Topic for Alarms (if email is provided)
  ErrorAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: HasAlarmEmail
    Properties:
      DisplayName: !Sub ${AWS::StackName} Error Alarms
      TopicName: !Sub ${AWS::StackName}-error-alarms
      Subscription:
        - Endpoint: !Ref AlarmEmail
          Protocol: email

  # CloudWatch Dashboard
  RLDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${RLRestApiFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Throttles", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Invocations, Errors, and Throttles",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${RLRestApiFunction}", { "stat": "Average" } ],
                  [ "...", { "stat": "Maximum" } ],
                  [ "...", { "stat": "Minimum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Duration",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${RLRestApi}", "Stage", "${Environment}", "Resource", "/api/v1/context", "Method", "POST" ],
                  [ ".", "4XXError", ".", ".", ".", ".", ".", ".", ".", "." ],
                  [ ".", "5XXError", ".", ".", ".", ".", ".", ".", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Requests and Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Latency", "ApiName", "${RLRestApi}", "Stage", "${Environment}", "Resource", "/api/v1/context", "Method", "POST", { "stat": "Average" } ],
                  [ "...", { "stat": "p90" } ],
                  [ "...", { "stat": "Maximum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Latency",
                "period": 300
              }
            }
          ]
        }

Conditions:
  HasAlarmEmail: !Not
    - !Equals
      - !Ref AlarmEmail
      - ''

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${RLRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/api/v1/context

  ApiId:
    Description: API Gateway ID
    Value: !Ref RLRestApi

  ApiKey:
    Description: API Key for accessing the API
    Value: !Ref ApiKey

  LambdaArn:
    Description: ARN of the Lambda function
    Value: !GetAtt RLRestApiFunction.Arn

  CloudWatchDashboard:
    Description: URL to CloudWatch Dashboard
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${RLDashboard}

  LambdaLogGroup:
    Description: CloudWatch Log Group for Lambda function
    Value: !Sub /aws/lambda/${RLRestApiFunction}