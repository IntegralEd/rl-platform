# Updated Recursive Mock Gateway Configuration
# 
# This YAML file documents the configuration for the assistant REST API integration.
# 
# Integration Flow:
# - The client, via client-merit-instructional-flow.js, initiates an end-to-end chat session through an initial auto-volley request.
# - This request communicates with the assistant REST API endpoint (e.g., /api/v1/assistant/chat) using a preconfigured project/assistant pair.
# - The system provides context-aware responses by loading user context on the backend and attaching it to the session.
# - All interactions with Redis (for context caching, TTL management, etc.) are handled exclusively on the backend. The frontend does not interact with Redis directly.
# 
# Reference Documentation:
# - apr-19-merit-e2e-backend tasks.md: Backend responsibilities and deployment processes.
# - apr-19-merit-e2e-integration.md: End-to-end integration testing and verification.
# - merit-apr-16-redis-integration.md: Details on Redis integration and context handling.
# - Merit_Frontend_Build_Cycle_Apr13.md: Frontend build cycle, error handling, and version standards.
# 
# Note: Any updates to the assistant REST API standard must be mirrored in client-merit-instructional-flow.js to ensure a smooth chat experience for both new and returning users.

# Recursive Learning Platform API Gateway Configuration
# Version: 1.0.0
# Last Updated: April 20, 2025
# Environment: Production
# Description: OpenAPI 3.0 specification for Recursive Learning Platform Mock Gateway

openapi: 3.0.3
info:
  title: Recursive Mock Gateway
  description: |
    API Gateway configuration for Recursive Learning Platform with CORS support.
    Handles mock testing endpoints and Lambda integrations for platform services.
  version: 1.0.0
  contact:
    name: Recursive Learning Platform Team
    url: https://recursivelearning.app

# Production endpoint configuration
servers:
  - url: https://api.recursivelearning.app/prod
    description: Production API Gateway endpoint

paths:
  #-----------------------------------------------------------------------------
  # Context Management Endpoint (Lambda Integration)
  #-----------------------------------------------------------------------------
  /api/v1/context:
    options:
      summary: CORS preflight handler for context endpoint
      description: Handles OPTIONS requests for CORS preflight checks
      responses:
        '200':
          description: Successful CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                {
                  "status": "success",
                  "message": "CORS preflight successful"
                }

    post:
      summary: Context management endpoint
      description: Handles context operations via Lambda integration
      security:
        - ApiKeyAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:559050208320:function:rl-context-handler/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
      responses:
        '200':
          description: Successful context operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string

  #-----------------------------------------------------------------------------
  # Mock Testing Endpoint (Mock Integration)
  #-----------------------------------------------------------------------------
  /api/v1/mock:
    options:
      summary: CORS preflight handler for mock endpoint
      description: Handles OPTIONS requests for CORS preflight checks
      responses:
        '200':
          description: Successful CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                {
                  "status": "success",
                  "message": "CORS preflight successful"
                }

    get:
      summary: Mock endpoint for testing
      description: Simple mock endpoint that returns a test response
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Successful mock response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200,
              "response": {
                "status": "success",
                "message": "Mock response successful",
                "timestamp": "$context.requestTimeEpoch",
                "requestId": "$context.requestId"
              }
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$.response'))
                {
                  "status": "$inputRoot.status",
                  "message": "$inputRoot.message",
                  "timestamp": $inputRoot.timestamp,
                  "requestId": "$inputRoot.requestId"
                }

  #-----------------------------------------------------------------------------
  # Assistant Tools Endpoint (Lambda Integration)
  #-----------------------------------------------------------------------------
  /api/v1/assistant:
    options:
      summary: CORS preflight handler for assistant tools endpoint
      description: Handles OPTIONS requests for CORS preflight checks
      responses:
        '200':
          description: Successful CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                {
                  "status": "success",
                  "message": "CORS preflight successful"
                }

    post:
      summary: Assistant tools operation endpoint
      description: Handles assistant tools operations via Lambda integration
      security:
        - ApiKeyAuth: []
      x-amazon-apigateway-integration:
        type: aws_proxy
        uri: arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:559050208320:function:rl-assistant-tools-handler/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: 200
      responses:
        '200':
          description: Successful assistant tools operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string

#-----------------------------------------------------------------------------
# Security Definitions
#-----------------------------------------------------------------------------
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-api-key
      in: header
      description: API key for authentication

#-----------------------------------------------------------------------------
# Error Response Configuration
#-----------------------------------------------------------------------------
x-amazon-apigateway-gateway-responses:
  # 4XX Client Errors
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
    responseTemplates:
      application/json: |
        {
          "error": true,
          "type": "client_error",
          "message": "$context.error.message",
          "requestId": "$context.requestId"
        }

  # 5XX Server Errors
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
    responseTemplates:
      application/json: |
        {
          "error": true,
          "type": "server_error",
          "message": "An internal server error occurred",
          "requestId": "$context.requestId"
        } 