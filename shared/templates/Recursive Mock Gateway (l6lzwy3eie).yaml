# Updated Recursive Mock Gateway Configuration
# 
# This YAML file documents the configuration for the assistant REST API integration.
# 
# Integration Flow:
# - The client, via client-merit-instructional-flow.js, initiates an end-to-end chat session through an initial auto-volley request.
# - This request communicates with the assistant REST API endpoint (e.g., /api/v1/assistant/chat) using a preconfigured project/assistant pair.
# - The system provides context-aware responses by loading user context on the backend and attaching it to the session.
# - All interactions with Redis (for context caching, TTL management, etc.) are handled exclusively on the backend. The frontend does not interact with Redis directly.
# 
# Reference Documentation:
# - apr-19-merit-e2e-integration.md: End-to-end integration testing and verification.

# Note: Any updates to the assistant REST API standard must be mirrored in client-merit-instructional-flow.js to ensure a smooth chat experience for both new and returning users.

# Recursive Learning Platform API Gateway Configuration
# Version: 1.0.0
# Last Updated: April 20, 2025
# Environment: Production
# Description: OpenAPI 3.0 specification for Recursive Learning Platform Mock Gateway

openapi: 3.0.3
info:
  title: Merit API Gateway
  description: API Gateway configuration with CORS support for Merit integration
  version: 1.0.0
  contact:
    name: Recursive Learning Platform Team
    url: https://recursivelearning.app
servers:
  - url: https://29wtfiieig.execute-api.us-east-2.amazonaws.com/prod
    description: Production API Gateway endpoint

x-amazon-apigateway-endpoint-configuration:
  vpcEndpointIds:
    - vpce-0123456789abcdef0  # Replace with actual VPC endpoint ID
  types:
    - REGIONAL

x-amazon-apigateway-domain-name:
  domainName: api.recursivelearning.app
  certificateArn: arn:aws:acm:us-east-2:559050208320:certificate/d1ba7f15-1f1b-400c-942e-c5e5a60ddf8c
  endpointConfiguration:
    types:
      - REGIONAL
  securityPolicy: TLS_1_2

x-amazon-apigateway-vpc-link:
  id: abcdef  # Replace with actual VPC link ID
  targetArns:
    - arn:aws:elasticloadbalancing:us-east-2:718770453195:loadbalancer/app/prod-cmh-1-cdtls-1-2-100/1120e7fa7fe27cd1
    - arn:aws:elasticloadbalancing:us-east-2:718770453195:loadbalancer/app/prod-cmh-1-cdtls-1-2-133/bcb4d9ef523a5fed
    - arn:aws:elasticloadbalancing:us-east-2:718770453195:loadbalancer/app/prod-cmh-1-cdtls-1-2-252/cdaafda30bb06c0f

paths:
  /:
    post:
      summary: Create thread or send message
      description: Main endpoint for thread creation and message sending
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Successful operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        uri: arn:aws:lambda:us-east-2:559050208320:function:rl-restapi-lambda-RLRestApiFunction-9inZKf1bUN4O
        httpMethod: POST
        connectionType: VPC_LINK
        connectionId: abcdef  # Replace with actual VPC link ID
        responses:
          default:
            statusCode: 200
    options:
      summary: CORS preflight handler for root endpoint
      description: Handles OPTIONS requests for CORS preflight checks
      responses:
        '200':
          description: Successful CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                {
                  "status": "success",
                  "message": "CORS preflight successful"
                }

  /cache/{action}:
    post:
      summary: Cache operations (get/set)
      description: Endpoint for Redis cache operations
      parameters:
        - name: action
          in: path
          required: true
          schema:
            type: string
            enum: [get, set]
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Successful cache operation
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        uri: arn:aws:lambda:us-east-2:559050208320:function:rl-restapi-lambda-RLRestApiFunction-9inZKf1bUN4O
        httpMethod: POST
        connectionType: VPC_LINK
        connectionId: abcdef  # Replace with actual VPC link ID
    options:
      summary: CORS preflight handler for cache endpoints
      description: Handles OPTIONS requests for CORS preflight checks
      parameters:
        - name: action
          in: path
          required: true
          schema:
            type: string
            enum: [get, set]
      responses:
        '200':
          description: Successful CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                {
                  "status": "success",
                  "message": "CORS preflight successful"
                }

  /cache/health:
    get:
      summary: Cache health check
      description: Endpoint for checking Redis connection health
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: Successful health check
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: AWS_PROXY
        uri: arn:aws:lambda:us-east-2:559050208320:function:rl-restapi-lambda-RLRestApiFunction-9inZKf1bUN4O
        httpMethod: GET
        connectionType: VPC_LINK
        connectionId: abcdef  # Replace with actual VPC link ID
    options:
      summary: CORS preflight handler for health check endpoint
      description: Handles OPTIONS requests for CORS preflight checks
      responses:
        '200':
          description: Successful CORS preflight response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            responseTemplates:
              application/json: |
                {
                  "status": "success",
                  "message": "CORS preflight successful"
                }

#-----------------------------------------------------------------------------
# Security Definitions
#-----------------------------------------------------------------------------
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-api-key
      in: header
      description: API key for authentication with the Merit API Gateway

#-----------------------------------------------------------------------------
# Error Response Configuration
#-----------------------------------------------------------------------------
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD'"
      gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD'"
      gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
  UNAUTHORIZED:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD'"
      gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
  ACCESS_DENIED:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Origin,Authorization'"
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,HEAD'"
      gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"

security:
  - ApiKeyAuth: [] 