AWSTemplateFormatVersion: '2010-09-09'
Description: Recursive Learning REST API with API Gateway and VPC Link Integration

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - dev
      - prod
    Description: Environment name
  CertificateArn:
    Type: String
    Default: 'arn:aws:acm:us-east-2:559050208320:certificate/d1ba7f15-1f1b-400c-942e-c5e5a60ddf8c'
    Description: ACM certificate ARN for custom domain

Resources:
  RLRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: recursive-learning-api
      Description: Recursive Learning REST API with VPC Link Integration
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: api.recursivelearning.app
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
      SecurityPolicy: TLS_1_2

  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiStage
      - ApiDomainName
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref RLRestApi
      Stage: !Ref Environment

  # VPC Link for ALB integration
  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: !Sub ${AWS::StackName}-vpclink
      Description: Merit API Gateway VPC Link for Production
      TargetArns:
        - arn:aws:elasticloadbalancing:us-east-2:559050208320:loadbalancer/app/merit-api-lb/1120e7fa7fe27cd1

  # API Resources
  ApiResourceV1:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !GetAtt RLRestApi.RootResourceId
      PathPart: api

  ApiResourceVersion:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: v1

  ApiResourceContext:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceVersion
      PathPart: context

  ApiResourceMock:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceVersion
      PathPart: mock

  # CORS Gateway Responses
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RLRestApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,Authorization'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RLRestApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,Authorization'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  # API Methods
  ApiMethodContextPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceContext
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: POST
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VpcLink
        Uri: !Sub https://api.recursivelearning.app/${Environment}/api/v1/context
        RequestParameters:
          integration.request.header.X-Forwarded-For: context.identity.sourceIp

  ApiMethodContextOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceContext
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiMethodMockGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceMock
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
            ResponseTemplates:
              application/json: '{"message": "Mock response successful", "timestamp": "$context.requestTimeEpoch"}'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiMethodMockOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceMock
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Deployment & Stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethodContextPost
      - ApiMethodContextOptions
      - ApiMethodMockGet
      - ApiMethodMockOptions
    Properties:
      RestApiId: !Ref RLRestApi
      Description: API Deployment

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref RLRestApi
      StageName: !Ref Environment
      Variables:
        environment: !Ref Environment
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          MetricsEnabled: true
          DataTraceEnabled: true
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50

  # API Key & Usage Plan
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ApiStage
    Properties:
      Name: !Sub ${AWS::StackName}-api-key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RLRestApi
          StageName: !Ref Environment

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiStage
    Properties:
      UsagePlanName: !Sub ${AWS::StackName}-usage-plan
      Description: Usage plan for Recursive Learning API
      ApiStages:
        - ApiId: !Ref RLRestApi
          Stage: !Ref Environment
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # CloudWatch Dashboard
  ApiGatewayDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${RLRestApi}", "Stage", "${Environment}" ],
                  [ ".", "4XXError", ".", ".", ".", "." ],
                  [ ".", "5XXError", ".", ".", ".", "." ]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "title": "API Gateway Requests and Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Latency", "ApiName", "${RLRestApi}", "Stage", "${Environment}", { "stat": "Average" } ],
                  [ "...", { "stat": "p90" } ],
                  [ "...", { "stat": "Maximum" } ]
                ],
                "view": "timeSeries",
                "region": "${AWS::Region}",
                "title": "API Gateway Latency",
                "period": 300
              }
            }
          ]
        }

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${RLRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  CustomDomainEndpoint:
    Description: Custom domain endpoint URL
    Value: !Sub https://${ApiDomainName}

  VpcLinkId:
    Description: VPC Link ID
    Value: !Ref VpcLink

  ApiId:
    Description: API Gateway ID
    Value: !Ref RLRestApi

  ApiKey:
    Description: API Key for accessing the API
    Value: !Ref ApiKey

  DashboardUrl:
    Description: CloudWatch Dashboard URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ApiGatewayDashboard}