AWSTemplateFormatVersion: '2010-09-09'
Description: Recursive Learning REST API with API Gateway and VPC Link Integration

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Default: vpc-07e76ce384fa696e0
    Description: VPC ID for the VPC Link (us-east-2)

  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - review
    Description: Environment name for deployment

  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-2:559050208320:certificate/d1ba7f15-1f1b-400c-942e-c5e5a60ddf8c
    Description: ARN of the SSL certificate for the custom domain

  DomainName:
    Type: String
    Default: api.recursivelearning.app
    Description: Existing API Gateway domain name

  S3Bucket:
    Type: String
    Description: S3 bucket containing Lambda deployment package
    Default: rl-lambda-deployments

  AlarmEmail:
    Type: String
    Description: Email address to notify when API Gateway alarms are triggered (optional)
    Default: ''

Resources:
  RLRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: recursive-learning-api
      Description: Recursive Learning REST API with VPC Link Integration
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*

  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiStage
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref RLRestApi
      Stage: !Ref Environment

  # VPC Link for ALB integration
  VpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: !Sub ${AWS::StackName}-vpclink
      Description: Merit API Gateway VPC Link for Production
      TargetArns:
        - arn:aws:elasticloadbalancing:us-east-2:559050208320:loadbalancer/app/merit-api-lb/1120e7fa7fe27cd1

  # API Resources
  ApiResourceContext:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !GetAtt RLRestApi.RootResourceId
      PathPart: api

  ApiResourceV1:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceContext
      PathPart: v1

  ApiResourceContextEndpoint:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: context

  ApiResourceMock:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: mock

  ApiResourceAssistant:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: assistant

  ApiResourceThread:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RLRestApi
      ParentId: !Ref ApiResourceV1
      PathPart: thread

  # CORS Gateway Responses
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RLRestApi
      ResponseType: DEFAULT_4XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Authorization'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref RLRestApi
      ResponseType: DEFAULT_5XX
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,X-Project-ID,Authorization'"
        gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  # API Methods
  ApiMethodContextPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceContextEndpoint
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RLRestApiFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiMethodContextOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceContext
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  ApiMethodMockGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceMock
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
            ResponseTemplates:
              application/json: '{"message": "Mock response successful", "timestamp": "$context.requestTimeEpoch"}'
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiMethodMockOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RLRestApi
      ResourceId: !Ref ApiResourceMock
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'https://recursivelearning.app'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # API Deployment & Stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethodContextPost
      - ApiMethodContextOptions
      - ApiMethodMockGet
      - ApiMethodMockOptions
    Properties:
      RestApiId: !Ref RLRestApi
      Description: API Deployment

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref RLRestApi
      StageName: !Ref Environment
      Variables:
        environment: !Ref Environment
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          MetricsEnabled: true
          DataTraceEnabled: true
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50

  # API Key & Usage Plan
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ApiStage
    Properties:
      Name: !Sub ${AWS::StackName}-api-key
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RLRestApi
          StageName: !Ref Environment

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiStage
    Properties:
      UsagePlanName: rl-rest-api-usage-plan
      Description: Usage plan for Recursive Learning API
      ApiStages:
        - ApiId: !Ref RLRestApi
          Stage: !Ref Environment
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 100
        RateLimit: 50

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - UsagePlan
      - ApiKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Lambda Function and Role
  RLRestApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${Environment}/lambda.zip
      Handler: lambda_handler_integration.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/integraled/central/*
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-*:*

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-errors
      AlarmDescription: Alarm if Lambda function has errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref RLRestApiFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If
        - HasAlarmEmail
        - - !Ref ErrorAlarmTopic
        - !Ref AWS::NoValue

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-duration
      AlarmDescription: Alarm if Lambda function duration exceeds 90% of timeout
      MetricName: Duration
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref RLRestApiFunction
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 3
      Threshold: 27000 # 90% of 30 seconds (in ms)
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If
        - HasAlarmEmail
        - - !Ref ErrorAlarmTopic
        - !Ref AWS::NoValue

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-throttles
      AlarmDescription: Alarm if Lambda function is being throttled
      MetricName: Throttles
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref RLRestApiFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions: !If
        - HasAlarmEmail
        - - !Ref ErrorAlarmTopic
        - !Ref AWS::NoValue

  ApiGateway5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlarmEmail
    Properties:
      AlarmDescription: Alert when API Gateway returns too many 5xx errors
      Namespace: AWS/ApiGateway
      MetricName: 5XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref RLRestApi
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic

  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasAlarmEmail
    Properties:
      AlarmDescription: Alert when Lambda function has too many errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref RLRestApiFunction
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlarmTopic
      OKActions:
        - !Ref AlarmTopic

  AlarmTopic:
    Type: AWS::SNS::Topic
    Condition: HasAlarmEmail
    Properties:
      DisplayName: RL API Gateway Alarms
      TopicName: !Sub ${Environment}-api-gateway-alarms
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlarmEmail

  # SNS Topic for Alarms
  ErrorAlarmTopic:
    Type: AWS::SNS::Topic
    Condition: HasAlarmEmail
    Properties:
      DisplayName: !Sub ${AWS::StackName} Error Alarms
      TopicName: !Sub ${AWS::StackName}-error-alarms
      Subscription:
        - Endpoint: !Ref AlarmEmail
          Protocol: email

  # CloudWatch Dashboard
  RLDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-dashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${RLRestApiFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Throttles", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Invocations, Errors, and Throttles",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Duration", "FunctionName", "${RLRestApiFunction}", { "stat": "Average" } ],
                  [ "...", { "stat": "Maximum" } ],
                  [ "...", { "stat": "Minimum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Duration",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Count", "ApiName", "${RLRestApi}", "Stage", "${Environment}", "Resource", "/api/v1/context", "Method", "POST" ],
                  [ ".", "4XXError", ".", ".", ".", ".", ".", ".", ".", "." ],
                  [ ".", "5XXError", ".", ".", ".", ".", ".", ".", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Requests and Errors",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApiGateway", "Latency", "ApiName", "${RLRestApi}", "Stage", "${Environment}", "Resource", "/api/v1/context", "Method", "POST", { "stat": "Average" } ],
                  [ "...", { "stat": "p90" } ],
                  [ "...", { "stat": "Maximum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Gateway Latency",
                "period": 300
              }
            }
          ]
        }

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RLRestApiFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RLRestApi}/*

Conditions:
  HasAlarmEmail: !Not [!Equals [!Ref AlarmEmail, '']]

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${RLRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  CustomDomainEndpoint:
    Description: Custom domain endpoint URL
    Value: !Sub https://${DomainName}

  VpcLinkId:
    Description: VPC Link ID
    Value: !Ref VpcLink

  ApiId:
    Description: API Gateway ID
    Value: !Ref RLRestApi

  ApiKey:
    Description: API Key for accessing the API
    Value: !Ref ApiKey

  DashboardUrl:
    Description: CloudWatch Dashboard URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${RLDashboard}

  UsagePlanId:
    Description: Usage Plan ID for API access
    Value: !Ref UsagePlan
    
  UsagePlanName:
    Description: Usage Plan Name
    Value: rl-rest-api-usage-plan