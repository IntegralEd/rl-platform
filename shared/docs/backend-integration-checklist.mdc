# Backend Integration Checklist

This document aligns the frontend implementation with the Recursive Learning REST API requirements. Follow this checklist to ensure proper integration with the backend services.

## API Endpoint Configuration

### Base URL
```
https://{api-id}.execute-api.us-east-2.amazonaws.com/{environment}/api/v1/context
```

Where:
- `{api-id}`: The API Gateway ID (provided by backend team)
- `{environment}`: Either 'dev' or 'prod'

### Required Headers
All requests must include:
```
Content-Type: application/json
X-API-Key: {api-key}              // API key (provided after deployment)
X-Session-Token: {jwt_token}       // JWT authentication token
X-Client-ID: {client_identifier}   // Client identifier from URL
X-Project-ID: {project_identifier} // Project identifier from URL
```

### URL Pattern Mapping
| URL Pattern | API Endpoint | 
|-------------|--------------|
| `*_live.html` | `/api/v1/{client}/{project}/content` |
| `*_review.html` | `/api/v1/{client}/{project}/review/{token}` |
| `*_temp.html` | `/api/v1/{client}/{project}/preview` |
| `*_admin.html` | `/api/v1/admin/{client}/{project}` |

## Authentication Implementation

### Session Token Validation
- [ ] Implement token storage in sessionStorage
- [ ] Add token refresh mechanism before expiration
- [ ] Include token in all API requests
- [ ] Handle authentication failures gracefully

### Client Token Mapping
```javascript
const clientTokenMap = {
  "st": "schoolteacher",
  "elpl": "epl_learning",
  "bhb": "bright_horizons",
  "integraled": "integrated_education"
};
```

## Role-Based Access Control

### Permission Implementation
- [ ] Store user permissions in secure sessionStorage
- [ ] Implement permission checking function:
```javascript
function hasPermission(permissionName) {
  const userPermissions = JSON.parse(sessionStorage.getItem('userPermissions'));
  return userPermissions && userPermissions.includes(permissionName);
}
```

- [ ] Conditionally render UI elements based on permissions
- [ ] Protect sensitive routes with permission checks

### Key Role-Permission Mappings

| Role | Core Permissions | Additional Capabilities |
|------|-----------------|--------------------------|
| `admin` | `['*']` | All system actions |
| `org_admin` | `['manage_org_users', 'view_org_data']` | Organization-wide administration |
| `client_sme` | `['review_content', 'approve_changes']` | Client subject matter expertise |
| `team_leader` | `['manage_reviews', 'assign_tasks']` | Project and team management |
| `contributor` | `['create_tickets', 'submit_feedback']` | Content contribution |
| `teacher` | `['view_student_data', 'provide_feedback']` | Educational features |
| `student` | `['read_content', 'submit_assignments']` | Limited learner access |
| `test` | `['test_features']` | Temporary testing access |

## CORS Implementation

### Allowed Origins
```
https://recursivelearning.app
https://*.recursivelearning.app
https://*.integraled.org
```

### Request Implementation
```javascript
async function secureFetch(url, options = {}) {
  const defaultOptions = {
    credentials: 'include',
    mode: 'cors',
    headers: {
      'Content-Type': 'application/json',
      'X-API-Key': API_KEY,
      'X-Session-Token': sessionStorage.getItem('sessionToken'),
      'X-Role-ID': sessionStorage.getItem('userRole'),
      'X-Client-ID': getClientIdFromUrl(),
      'X-Project-ID': getProjectIdFromUrl()
    }
  };
  
  const response = await fetch(url, { 
    ...defaultOptions, 
    ...options,
    headers: {
      ...defaultOptions.headers,
      ...options.headers
    }
  });
  
  if (response.status === 403) {
    // Handle CORS or permission errors
    console.error('CORS or permission error:', await response.json());
    throw new Error('Access denied - check permissions or allowed origins');
  }
  
  return response;
}
```

## Airtable Integration

### Assistant Configuration
- [ ] Implement retrieval of assistant IDs from the backend
- [ ] Support dynamic assistant selection based on context
- [ ] Handle fallback assistants when primary is unavailable

### Logging Implementation
- [ ] Implement logging of user interactions:
```javascript
async function logInteraction(data) {
  await secureFetch(`${API_BASE_URL}/api/v1/log`, {
    method: 'POST',
    body: JSON.stringify({
      user_id: data.userId,
      org_id: data.orgId,
      assistant_id: data.assistantId,
      thread_id: data.threadId,
      message: data.message,
      response: data.response,
      url: window.location.href,
      url_context: data.urlContext
    })
  });
}
```

## Tokenized Review System

### Review Token Support
- [ ] Implement review token handling in URLs
- [ ] Add token verification with backend
- [ ] Support token-based authentication flow
- [ ] Configure Qipu comments for review mode

## Error Handling

### Standard Error Response Handling
```javascript
try {
  const response = await secureFetch(apiEndpoint);
  if (!response.ok) {
    const errorData = await response.json();
    // Handle different error types
    if (errorData.error.code === 'UNAUTHORIZED') {
      // Handle authentication errors
    } else if (errorData.error.code.startsWith('RATE_LIMIT')) {
      // Handle rate limiting
    } else {
      // Handle other API errors
    }
    throw new Error(errorData.error.message);
  }
  return await response.json();
} catch (error) {
  console.error('API request failed:', error);
  // Show user-friendly error message
}
```

## Monitoring Integration

### CloudWatch Metrics
- [ ] Implement client-side error reporting to CloudWatch
- [ ] Add performance timing metrics
- [ ] Configure usage tracking for key features

## Testing Requirements

- [ ] Test authentication flow with valid and invalid tokens
- [ ] Verify CORS behavior across different origins
- [ ] Test role-based UI rendering for all supported roles
- [ ] Validate error handling for common failure scenarios
- [ ] Test review token functionality end-to-end 