---
description: Merit Redis Integration Checklist with 25-action sprints
globs: ["/clients/elpl/merit/*.html", "/admin/pages/elpl/merit/*.html"]
alwaysApply: false
---

# Merit Redis Integration Checklist (2025.04.12)

## Current Progress (✓ = Done, ⚠️ = In Progress)
✓ html2canvas integration via CDN
✓ Screenshot UX improvements (header/footer removal)
✓ Review banner updated to watermark style
✓ Standup report submitted with findings
⚠️ SVG icon implementation planning
⚠️ Theme testing across variants

## Sprint 1: Core Redis Setup (Actions 1-25)

### Redis Infrastructure (Actions 1-8)
- [ ] Verify Redis server operational status
- [ ] Test SSM parameter `/integraled/redis/endpoint` access
- [ ] Validate Lambda function Redis permissions
- [ ] Configure frontend API endpoints for Redis
- [ ] Implement Redis cache headers
- [ ] Add retry mechanisms with Airtable fallback
- [ ] Setup cache invalidation triggers
- [ ] Add cache status indicators

### Chat System Enhancement (Actions 9-16)
- [ ] Implement Redis-based message caching
- [ ] Add loading states for cache operations
- [ ] Configure thread persistence with Redis
- [ ] Add cache hit/miss tracking
- [ ] Implement optimistic UI updates
- [ ] Add cache write-through mechanisms
- [ ] Configure proper cache TTL settings
- [ ] Add performance monitoring

### UI/UX Improvements (Actions 17-25)
- [ ] Create SVG icons in shared/assets/images/qipu/
  - [ ] qipu_paintbrush.svg
  - [ ] qipu_screenshot.svg
  - [ ] qipu_draw.svg
  - [ ] qipu_text.svg
  - [ ] qipu_arrow.svg
  - [ ] qipu_erase.svg
  - [ ] qipu_comment.svg
- [ ] Test across different themes
- [ ] Implement accessibility improvements

## Performance Expectations
- Comment load time: < 100ms (vs. 500-800ms with direct Airtable)
- Page initialization: < 300ms (vs. 1-2s with direct Airtable)
- Comment submission: Near-instant UI update with background sync
- Cache hit ratio target: > 80%

## Testing Requirements
- [ ] Redis connectivity verification
- [ ] Basic chat functionality
- [ ] Message persistence
- [ ] Cache hit/miss handling
- [ ] Full chat system responsiveness
- [ ] Redis cache performance
- [ ] Concurrent user support
- [ ] System load validation

## Integration Notes
- Use existing CURL tests as reference for OpenAI integration
- Maintain backward compatibility
- Document all cache-related configurations
- Monitor system performance during integration

## Standup Report Schedule
- Submit report after each 25-action sprint
- Include performance metrics and cache statistics
- Document any issues or blockers
- Track progress against success criteria

## Success Criteria
1. Redis cache operational and properly configured
2. Chat system fully integrated with Redis
3. All UI elements updated with new SVG icons
4. Performance metrics meeting or exceeding targets
5. Accessibility requirements met
6. Theme compatibility verified
7. Documentation updated

## Rollback Plan
1. Maintain current production endpoints
2. Document all changes for potential rollback
3. Keep existing functionality intact
4. Test rollback procedures before each deployment
5. Monitor system stability during transitions 