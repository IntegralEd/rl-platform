---
description: 
globs: 
alwaysApply: false
---
# Cross-Domain Authentication System

This document outlines the authentication mechanisms used for cross-domain access to admin and review resources in the Recursive Learning platform.

## Authentication Sources

The platform supports multiple authentication sources:

1. **Integral Mothership** (integral-mothership.softr.app) - Primary admin access
2. **Recursive Review Portal** (recursive-review.softr.app) - Client/SME review access
3. **Tokenized Review Links** - Unique URLs with embedded tokens for direct review access

## Authentication Flows

### 1. Softr Iframe Authentication

When embedded in a trusted Softr application:

```mermaid
sequenceDiagram
    Softr->>Admin: Embed admin panel in iframe
    Admin->>Admin: Check referrer origin
    Admin->>Admin: Verify trusted source
    Admin->>Softr: Ready for auth data
    Softr->>Admin: Pass user data via URL params
    Admin->>Admin: Store validation in sessionStorage
```

### 2. Review Token Authentication

For direct access via tokenized review links:

```mermaid
sequenceDiagram
    User->>Admin: Access with review_token parameter
    Admin->>Backend: Verify token validity
    Backend->>Admin: Return user and project data
    Admin->>Admin: Store validation in sessionStorage
    Admin->>Admin: Setup review-specific UI
    Admin->>Qipu: Initialize commenting system
```

### 3. Authentication Priority

The system attempts authentication in the following order:

1. Check stored authentication in sessionStorage (fastest)
2. Check for review token in URL
3. Check for iframe embedding from trusted source with URL parameters
4. Check for iframe embedding from trusted source without parameters

## Review Token System

The review token system allows clients and SMEs to access specific review pages without requiring a full login:

- **Token Format**: Base64-encoded JSON containing user ID, project ID, and expiration
- **Token Verification**: Backend API validates the token and returns user details
- **URL Format**: `https://recursivelearning.app/admin/pages/st/goalsetter/goalsetter_review.html?review_token=abc123`

### Token Generation (Backend)

```javascript
function generateReviewToken(userId, projectId, expiryHours = 168) { // Default: 7 days
  const payload = {
    userId: userId,
    projectId: projectId,
    exp: Math.floor(Date.now() / 1000) + (expiryHours * 3600)
  };
  
  // In production, this would use a proper signing mechanism
  return Buffer.from(JSON.stringify(payload)).toString('base64');
}
```

### Token Verification (Backend)

```javascript
function verifyReviewToken(token) {
  try {
    const payload = JSON.parse(Buffer.from(token, 'base64').toString());
    
    // Check expiration
    if (payload.exp < Math.floor(Date.now() / 1000)) {
      return { valid: false, reason: 'Token expired' };
    }
    
    // Fetch user details from Airtable
    const user = getUserFromAirtable(payload.userId);
    if (!user) {
      return { valid: false, reason: 'User not found' };
    }
    
    // Verify user has access to this project
    if (!userHasProjectAccess(user, payload.projectId)) {
      return { valid: false, reason: 'User does not have access to this project' };
    }
    
    return {
      valid: true,
      userId: payload.userId,
      name: user.name,
      email: user.email,
      role: user.role,
      projectId: payload.projectId,
      reviewSession: payload.reviewSession || generateReviewSession()
    };
  } catch (e) {
    return { valid: false, reason: 'Invalid token format' };
  }
}
```

## Qipu Integration for Review Comments

The authentication system integrates with the Qipu commenting system to enable client feedback:

1. After successful authentication, the system initializes Qipu with the user's data
2. For review tokens, Qipu is initialized in "review" mode
3. For admin access, Qipu is initialized in "edit" mode
4. Comments are associated with the user's ID and the specific project

## Security Considerations

1. **Trusted Origins**: Only explicitly whitelisted domains can embed admin panels
2. **Token Expiration**: Review tokens have a limited lifespan (default: 7 days)
3. **Session Timeout**: Authentication sessions expire after 1 hour of inactivity
4. **Role Verification**: Backend verifies the user has appropriate permissions for the requested resource
5. **Project Binding**: Tokens are bound to specific projects to prevent unauthorized access

## Debug Mode

For local development, the system provides fallback authentication methods:

- In debug mode on localhost, review tokens can bypass backend verification
- Debug-specific log messages are output to the console
- Authentication states are clearly indicated in the UI

## Usage Examples

### Creating a Review Link for a Client

```javascript
// Backend code (Node.js)
const userId = "client_123";
const projectId = "goalsetter_project";
const reviewToken = generateReviewToken(userId, projectId);

const reviewUrl = `https://recursivelearning.app/admin/pages/st/goalsetter/goalsetter_review.html?review_token=${reviewToken}`;

// Send email to client with review URL
sendReviewInvitation(client.email, {
  name: client.name,
  reviewUrl: reviewUrl,
  projectName: "GoalSetter App",
  expiryDays: 7
});
```

### Embedding in Recursive Review Portal

```html
<!-- In Recursive Review Softr app -->
<iframe 
  src="https://recursivelearning.app/admin/pages/st/goalsetter/goalsetter_review.html?User_ID=user_abc&Email=mike@example.com&Name=Mike%20Client&Role=client_sme&Project_ID=goalsetter_123" 
  width="100%" 
  height="800px"
  allow="fullscreen">
</iframe>
```

## Security Rules

1. **Origin Validation**
   - Only accept postMessages from trusted domains
   - Validate source before processing messages

2. **Role-Based Access**
   - Only users with "Org Admin" role can access admin panels
   - Role validation occurs at each authentication step

3. **Cross-Origin Resource Sharing (CORS)**
   - Maintain appropriate security headers
   - No direct DOM access between frames of different origins

4. **Session Management**
   - Short-lived sessions (1 hour)
   - Clear session on logout
   - Store minimal user data

## Debugging and Logs

- Debug logs use `[Auth]` prefix
- Set `AdminAuth.state.debug = false` to disable in production
- Logs include timestamps and elapsed time metrics

## Integration Examples

### Softr Wrapper Setup

```javascript
// Safely add authentication parameters to iframe URL
const iframeUrl = new URL(adminPageUrl);
iframeUrl.searchParams.append('User_ID', userData?.User_ID || '');
iframeUrl.searchParams.append('Name', userData?.Name || 'Guest');
iframeUrl.searchParams.append('Email', userData?.email || '');
iframeUrl.searchParams.append('Role', userData?.IE_Role_Level || '');
iframe.src = iframeUrl.toString();

// Also send via postMessage once iframe loads
iframe.onload = function() {
    iframe.contentWindow.postMessage({
        type: 'auth-data',
        userId: userData?.User_ID,
        name: userData?.Name,
        email: userData?.email,
        role: userData?.IE_Role_Level
    }, 'https://recursivelearning.app');
}
```

### Iframe Authentication Check

```javascript
// Check URL parameters first (highest priority)
function checkUrlParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    
    const userId = urlParams.get('User_ID') || urlParams.get('user_id');
    const email = urlParams.get('Email') || urlParams.get('email');
    const name = urlParams.get('Name') || urlParams.get('name');
    const role = urlParams.get('Role') || urlParams.get('role');
    
    if (email && role === 'Org Admin') {
        // Authenticate user
    }
}
```

## Troubleshooting

1. **No authentication source available**
   - Check URL parameters are properly passed
   - Verify iframe src URL format
   - Enable CORS headers on server

2. **Invalid role level**
   - Verify user has "Org Admin" role in Airtable
   - Check URL parameter case sensitivity

3. **Cross-origin errors**
   - Use postMessage instead of direct DOM access
   - Enable debugging with query parameter `?debug=true` 