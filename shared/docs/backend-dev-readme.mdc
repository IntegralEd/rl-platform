---
description: 
globs: 
alwaysApply: false
---
# Backend Developer Guide
**Version: 1.0.0 (April 2024)**

This document provides technical specifications for backend developers to properly integrate with the RL Platform frontend. It covers URL conventions, authentication schemes, API endpoints, and data exchange formats.

## Table of Contents
1. [URL Rules and Configuration](mdc:#url-rules-and-configuration)
2. [Authentication and Validation](mdc:#authentication-and-validation)
3. [API Communication Protocol](mdc:#api-communication-protocol)
4. [Token Format and Headers](mdc:#token-format-and-headers)
5. [Payload Body Format](mdc:#payload-body-format)
6. [Lambda Implementation Guide](mdc:#lambda-implementation-guide)
7. [Monitoring and Reporting](mdc:#monitoring-and-reporting)

## URL Rules and Configuration

### URL Patterns
The frontend follows strict URL patterns that backend services must validate against:

```
/clients/{client}/{project}/{project}_live.html    # Production version
/clients/{client}/{project}/{project}_review.html  # Review version
/clients/{client}/{project}/{project}_temp.html    # Preview version
/admin/pages/{client}/{project}/{project}_admin.html  # Admin interface
```

### Validation Rules
Backend services should validate requests against these patterns:

```javascript
const validateUrlPattern = (url) => {
  const patterns = {
    live: /\/clients\/[^\/]+\/[^\/]+\/[^\/]+_live\.html$/,
    review: /\/clients\/[^\/]+\/[^\/]+\/[^\/]+_review\.html$/,
    temp: /\/clients\/[^\/]+\/[^\/]+\/[^\/]+_temp\.html$/,
    admin: /\/admin\/pages\/[^\/]+\/[^\/]+\/[^\/]+_admin\.html$/
  };
  
  return {
    isLive: patterns.live.test(url),
    isReview: patterns.review.test(url),
    isTemp: patterns.temp.test(url),
    isAdmin: patterns.admin.test(url),
    isValid: Object.values(patterns).some(pattern => pattern.test(url))
  };
};
```

### API Endpoint Mapping
Lambda functions should map to these URL patterns with corresponding endpoints:

| URL Pattern | API Endpoint | 
|-------------|--------------|
| `*_live.html` | `/api/v1/{client}/{project}/content` |
| `*_review.html` | `/api/v1/{client}/{project}/review/{token}` |
| `*_temp.html` | `/api/v1/{client}/{project}/preview` |
| `*_admin.html` | `/api/v1/admin/{client}/{project}` |

## Authentication and Validation

### Authentication Flow
1. Frontend requests include authentication tokens in headers
2. Backend validates tokens against user store
3. Role-based permissions determine access levels

### User Validation Schema
```javascript
// User validation schema
const userValidationSchema = {
  email: {
    required: true,
    format: "email"
  },
  roleLevel: {
    required: true,
    enum: ["student", "teacher", "admin", "org_admin", "client_sme", "contributor", "team_leader", "test"],
    invalidValues: ["inactive"]
  },
  organization: {
    required: true,
    minLength: 2
  },
  sessionValidUntil: {
    required: true,
    format: "iso8601"
  },
  projects_active_at_id: {
    type: "array",
    description: "Array of project IDs that the user is actively assigned to"
  }
}
```

### Role-Based Access Control
| Role | Permissions |
|------|-------------|
| student | Read content, submit assignments |
| teacher | View student data, provide feedback |
| admin | Configure content, manage users |
| org_admin | Full system access |
| client_sme | Review content, provide feedback, approve changes |
| contributor | Create tickets, add comments, submit feedback |
| team_leader | View aggregated feedback, resolve tickets, assign tasks, manage review periods |
| test | Temporary access for end-to-end testing scenarios, mimics client_sme or other roles |

### Role Type Validation
Backend services should explicitly check for and reject inactive roles:

```javascript
const validateUserRole = (user) => {
  // Block inactive users
  if (user.roleLevel === "inactive") {
    return {
      isValid: false,
      error: "USER_INACTIVE",
      message: "User account is inactive"
    };
  }
  
  // Validate role-based permissions
  const allowedRoles = ["student", "teacher", "admin", "org_admin", "client_sme", "contributor", "team_leader", "test"];
  if (!allowedRoles.includes(user.roleLevel)) {
    return {
      isValid: false,
      error: "INVALID_ROLE",
      message: "User has an invalid role type"
    };
  }
  
  return {
    isValid: true,
    permissions: getRolePermissions(user.roleLevel)
  };
};
```

### Project-User Access Control
Backend services must validate that users have access to the requested project:

```javascript
const validateProjectAccess = (user, clientId, projectId) => {
  // For admin and org_admin, allow access to all projects
  if (["admin", "org_admin"].includes(user.roleLevel)) {
    return true;
  }
  
  // For other roles, check if the user has the project in their active projects
  if (!user.projects_active_at_id || !Array.isArray(user.projects_active_at_id)) {
    return false;
  }
  
  // The projects_active_at_id may contain entries like "st_goalsetter" 
  // or separate entries like "st" and "goalsetter"
  const combinedId = `${clientId}_${projectId}`;
  return user.projects_active_at_id.some(project => 
    project === combinedId || 
    project === clientId || 
    project === projectId
  );
};
```

### Client Token to Project Mapping
Backend services should map client tokens in URLs to internal project identifiers:

```javascript
const clientTokenMap = {
  "st": "schoolteacher",
  "elpl": "epl_learning",
  "bhb": "bright_horizons",
  "integraled": "integrated_education"
};

const mapClientTokenToInternal = (token) => {
  return clientTokenMap[token] || token;
};
```

The role types are synchronized with the IE_Central_Team table but originate from the master role database in Airtable, which contains additional metadata about each role.

### Handshake Protocol
1. Initial request includes `X-Session-Token`
2. Backend validates and returns `X-Session-Confirm` with session details
3. Frontend stores confirmation in sessionStorage
4. Subsequent requests include both tokens

```
┌────────┐                         ┌────────┐
│Frontend│                         │Backend │
└───┬────┘                         └───┬────┘
    │                                  │
    │ GET /api/v1/session              │
    │ X-Session-Token: {token}         │
    │─────────────────────────────────>│
    │                                  │
    │ 200 OK                           │
    │ X-Session-Confirm: {details}     │
    │<─────────────────────────────────│
    │                                  │
    │ GET /api/v1/{endpoint}           │
    │ X-Session-Token: {token}         │
    │ X-Session-Confirm: {details}     │
    │─────────────────────────────────>│
    │                                  │
```

## Token Format and Headers

### Required Headers
```
X-API-Key: {api_key}
X-Session-Token: {jwt_token}
X-Client-ID: {client_identifier}
X-Project-ID: {project_identifier}
Content-Type: application/json
```

### Session Token (JWT) Format
```json
{
  "header": {
    "alg": "HS256",
    "typ": "JWT"
  },
  "payload": {
    "sub": "user@example.com",
    "role": "client_sme",
    "org": "school_district_123",
    "client": "st",
    "project": "goalsetter",
    "iat": 1617753600,
    "exp": 1617840000,
    "permissions": ["review_content", "approve_changes"]
  }
}
```

### Additional Headers
```
X-Request-ID: {unique_request_id}       // Request tracking
X-Feature-Flags: {enabled_features}     // Feature toggles
X-Analytics-ID: {analytics_identifier}  // Analytics correlation
```

## Payload Body Format

### Standard Request Format
```json
{
  "requestId": "req_123456789",
  "timestamp": "2024-04-07T12:34:56Z",
  "clientId": "st",
  "projectId": "goalsetter",
  "operation": "get_content",
  "parameters": {
    "contentId": "lesson_123",
    "version": "latest",
    "format": "html"
  },
  "options": {
    "includeMetadata": true,
    "renderMathJax": true,
    "cacheStrategy": "network_first"
  }
}
```

### Standard Response Format
```json
{
  "requestId": "req_123456789",
  "timestamp": "2024-04-07T12:34:57Z",
  "status": "success",
  "data": {
    // Response data specific to the operation
  },
  "metadata": {
    "version": "1.2.3",
    "lastModified": "2024-04-05T10:30:00Z",
    "author": "content_team"
  },
  "pagination": {
    "totalItems": 100,
    "currentPage": 1,
    "itemsPerPage": 10,
    "totalPages": 10
  }
}
```

### Error Response Format
```json
{
  "requestId": "req_123456789",
  "timestamp": "2024-04-07T12:34:57Z",
  "status": "error",
  "error": {
    "code": "UNAUTHORIZED",
    "message": "Invalid or expired session token",
    "details": {
      "tokenExpiry": "2024-04-07T12:00:00Z",
      "currentTime": "2024-04-07T12:34:57Z"
    }
  }
}
```

## Lambda Implementation Guide

### Preflight Configuration
Lambda functions should implement a preflight check that:
1. Validates the request origin against allowed domains
2. Verifies API key and session token
3. Checks user permissions for the requested operation
4. Returns appropriate CORS headers

```javascript
// Preflight handler pseudocode
const handlePreflight = (event) => {
  const origin = event.headers.Origin || event.headers.origin;
  const allowedOrigins = getConfiguredOrigins();
  
  if (!allowedOrigins.includes(origin)) {
    return {
      statusCode: 403,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        status: 'error',
        error: {
          code: 'ORIGIN_NOT_ALLOWED',
          message: 'This origin is not allowed to access the API'
        }
      })
    };
  }
  
  // Continue with preflight checks...
  
  return {
    statusCode: 200,
    headers: {
      'Access-Control-Allow-Origin': origin,
      'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type,X-API-Key,X-Session-Token,X-Client-ID,X-Project-ID',
      'Access-Control-Max-Age': '86400'
    }
  };
};
```

### User Options Interpretation
Lambda should interpret user options from the request payload:

```javascript
// User options interpretation pseudocode
const interpretUserOptions = (options) => {
  return {
    // Default options
    cacheStrategy: 'network_first',
    renderMathJax: false,
    includeMetadata: true,
    
    // Override with user options
    ...options
  };
};
```

### Configuration for REST API Behavior
Configure API Gateway with resource policies that:
1. Limit request rates per client
2. Apply appropriate caching strategies
3. Implement request validation
4. Log detailed analytics for monitoring

## Inter-Repository Communication

### Recommended Protocol
We recommend implementing a WebSocket-based communication channel between Lambda functions and the frontend for real-time updates:

```javascript
// WebSocket connection establishment
const connectToWebSocket = () => {
  const socket = new WebSocket('wss://api.example.com/ws');
  
  socket.onopen = () => {
    console.log('WebSocket connection established');
    socket.send(JSON.stringify({
      type: 'AUTH',
      token: sessionStorage.getItem('sessionToken')
    }));
  };
  
  socket.onmessage = (event) => {
    const data = JSON.parse(event.data);
    handleWebSocketMessage(data);
  };
  
  return socket;
};
```

### Event Schema
```json
{
  "type": "EVENT",
  "event": "CONTENT_UPDATED",
  "timestamp": "2024-04-07T12:34:56Z",
  "data": {
    "clientId": "st",
    "projectId": "goalsetter",
    "contentId": "lesson_123",
    "action": "updated"
  }
}
```

## Monitoring and Reporting

### CloudWatch Integration
Backend services should publish metrics to CloudWatch for:
1. API request counts and latencies
2. Error rates and types
3. User session data
4. Content delivery statistics

### Metrics Schema
```json
{
  "metricName": "APIRequestCount",
  "dimensions": {
    "ClientId": "st",
    "ProjectId": "goalsetter",
    "Endpoint": "/api/v1/st/goalsetter/content"
  },
  "value": 1,
  "unit": "Count",
  "timestamp": "2024-04-07T12:34:56Z"
}
```

### Admin Page Integration
The `_admin.html` pages will consume CloudWatch metrics via:
1. Dedicated API endpoints for metrics retrieval
2. Real-time dashboard updates using WebSockets
3. Export capabilities for detailed analysis

### Metrics API Endpoint
```
GET /api/v1/admin/{client}/{project}/metrics
```

Response:
```json
{
  "metrics": [
    {
      "name": "APIRequestCount",
      "dimensions": {
        "ClientId": "st",
        "ProjectId": "goalsetter",
        "Endpoint": "/api/v1/st/goalsetter/content"
      },
      "datapoints": [
        {"timestamp": "2024-04-07T12:00:00Z", "value": 125},
        {"timestamp": "2024-04-07T13:00:00Z", "value": 143},
        {"timestamp": "2024-04-07T14:00:00Z", "value": 167}
      ],
      "statistic": "Sum",
      "period": 3600
    }
  ],
  "alarms": [
    {
      "name": "HighErrorRate",
      "status": "OK",
      "lastUpdated": "2024-04-07T14:30:00Z"
    }
  ]
}
```

## Implementation Checklist

- [ ] Set up URL validation in Lambda functions
- [ ] Implement authentication flow with JWT validation
- [ ] Configure API Gateway with resource policies
- [ ] Set up CloudWatch metrics and alarms
- [ ] Implement WebSocket communication channel
- [ ] Create admin metrics endpoints
- [ ] Document API endpoints in OpenAPI format
- [ ] Deploy serverless infrastructure with proper IAM roles 

# Backend Integration

## URL and Asset Path Conventions

When implementing backend services that interact with the frontend, it's crucial to understand the platform's URL and asset structure. The following conventions must be followed:

### URL Structure

1. **Client Pages**
   - `/clients/{client-id}/{activity-id}/{page}.html`
   - Example: `/clients/st/goalsetter/goalsetter_live.html`

2. **Admin Pages**
   - `/admin/pages/{client-id}/{activity-id}/{page}_admin.html`
   - Example: `/admin/pages/st/goalsetter/goalsetter_admin.html`

3. **Asset Paths**
   - Admin assets: `/admin/assets/{type}/{file}`
   - Client assets: `/clients/{client-id}/assets/{type}/{file}`
   - Shared assets: `/shared/assets/{type}/{file}`
   - Components: `/shared/page_ingredients/{component_type}/{file}`

### Backend Integration Points

1. **URL Processing**
   When processing URLs in backend services:
   ```javascript
   // Extract components from URL
   function extractUrlComponents(url) {
     const adminPageRegex = /\/admin\/pages\/([^\/]+)\/([^\/]+)\/([^_]+)_admin\.html/;
     const clientPageRegex = /\/clients\/([^\/]+)\/([^\/]+)\/([^\.]+)\.html/;
     
     let match, components = {};
     
     if (match = url.match(adminPageRegex)) {
       components = {
         type: 'admin',
         clientId: match[1],
         projectId: match[2],
         pageName: match[3],
         isAdmin: true
       };
     } else if (match = url.match(clientPageRegex)) {
       components = {
         type: 'client',
         clientId: match[1],
         projectId: match[2],
         pageName: match[3],
         isAdmin: false
       };
     }
     
     return components;
   }
   ```

2. **Asset Resolution**
   When resolving asset paths in backend services:
   ```javascript
   // Resolve asset path based on context
   function resolveAssetPath(assetName, assetType, context) {
     if (context.isAdmin) {
       return `/admin/assets/${assetType}/${assetName}`;
     } else if (context.isShared) {
       return `/shared/assets/${assetType}/${assetName}`;
     } else {
       return `/clients/${context.clientId}/assets/${assetType}/${assetName}`;
     }
   }
   ```

3. **Component Resolution**
   For loading page ingredients/components:
   ```javascript
   // Resolve component path
   function resolveComponentPath(componentType, componentName) {
     return `/shared/page_ingredients/${componentType}/${componentName}`;
   }
   ```

### Validation Rules

Backend services should implement validation for:

1. URL patterns (to prevent security issues)
2. Asset path traversal protection
3. Client/project access validation based on user roles
4. Logging all URL access patterns to CloudWatch

// ... existing content ... 