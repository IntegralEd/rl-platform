# Airtable Publishing Troubleshooting Guide

This guide addresses common issues when publishing standup reports to Airtable and provides diagnostic steps and solutions.

## Common Issues

### 1. Reports Not Appearing in Airtable

**Possible Causes:**
- Backend API permission issues
- Missing or incorrect API key
- Network connectivity problems
- Incorrect Airtable table/view IDs
- Frontend lacking proper permissions

**Diagnostic Steps:**
1. Run the `diagnoseAirtableConnection()` function from the browser console to check API connectivity
2. Check browser network tab for failed API requests
3. Verify API key and authentication headers are being sent
4. Confirm table/view IDs match those in the backend

### 2. Authentication Issues

The frontend may lack proper permissions to write to Airtable directly. Our system uses a backend proxy to securely handle Airtable operations.

**Key Requirements:**
- API endpoint requires authentication headers
- User must have appropriate permissions
- API key must be correctly set in session storage

## Implementation Options

### Option 1: Backend Proxy (Recommended)

The current implementation uses a backend proxy pattern:
```
Frontend -> Backend API -> Airtable API
```

Benefits:
- Secures API keys (not exposed to client)
- Centralizes access control
- Prevents rate limiting issues
- Allows logging and monitoring

To ensure this works:
1. Verify API endpoint is correctly configured
2. Check authentication headers are set properly
3. Ensure backend is properly forwarding requests to Airtable

### Option 2: Direct Airtable Integration

For development/testing only, direct Airtable access:
```
Frontend -> Airtable API (using personal access token)
```

**Implementation:**
```javascript
// Replace API endpoint in publisher config
PUBLISHER_CONFIG.AIRTABLE_API_ENDPOINT = 'https://api.airtable.com/v0/appqFjYLZiRlgZQDM';

// Add Airtable token to request
const result = await fetch(`${PUBLISHER_CONFIG.AIRTABLE_API_ENDPOINT}/${PUBLISHER_CONFIG.STANDUP_TABLE_ID}`, {
  method: 'POST',
  headers: {
    'Authorization': `Bearer YOUR_AIRTABLE_TOKEN`,
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    records: [airtableRecord]
  })
});
```

**Note:** This approach should ONLY be used for development purposes as it exposes the API token.

## Advanced Diagnostics

### Testing API Endpoint

```javascript
// Test Airtable API connectivity
async function testAirtableApi() {
  try {
    // Test with backend proxy
    const proxyResponse = await secureFetch(`/api/v1/airtable/tables`, {
      method: 'GET'
    });
    console.log('Backend proxy response:', proxyResponse);
    
    // If direct testing is allowed
    const directResponse = await fetch('https://api.airtable.com/v0/appqFjYLZiRlgZQDM/tables', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer YOUR_AIRTABLE_TOKEN`
      }
    });
    console.log('Direct API response:', await directResponse.json());
    
    return { proxySuccess: !!proxyResponse, directSuccess: directResponse.ok };
  } catch (error) {
    console.error('API test failed:', error);
    return { error: error.message };
  }
}
```

### Checking User Permissions

Frontend users need correct permission levels to perform Airtable operations. The minimal requirements are:

1. User must be authenticated
2. User must have `editor` or higher role
3. User must belong to the correct team

## Solution Recommendations

### 1. Backend Permission Fix

If diagnosis indicates permission issues:

1. Contact backend team to verify API permissions
2. Request temporary direct access for testing purposes
3. Ensure your user account has the correct role assignments

### 2. API Client Update

If authentication headers are missing:

```javascript
// Update API client to explicitly add Airtable headers
function addAirtableHeaders(headers) {
  // Add team identifier
  headers['X-Team'] = 'frontend';
  
  // Add additional headers required by backend
  headers['X-Airtable-Access'] = 'standup-reports';
}

// Add to authentication chain
export function enhanceSecureFetch() {
  const originalSecureFetch = secureFetch;
  return function(url, options = {}) {
    if (url.includes('/airtable')) {
      if (!options.headers) options.headers = {};
      addAirtableHeaders(options.headers);
    }
    return originalSecureFetch(url, options);
  };
}
```

### 3. Backend API Verification

To verify the backend API is working correctly:

1. Ask backend team to check API logs for your requests
2. Request a test endpoint for Airtable connectivity
3. Verify the API is correctly proxying requests to Airtable

## When To Escalate

If troubleshooting doesn't resolve the issue:

1. Gather diagnostic logs from console and network requests
2. Create a detailed report with steps to reproduce
3. Contact backend team with specific examples
4. Schedule a pair debugging session if needed

## Next Steps

1. Run the diagnostic function and collect results
2. Check network traffic for specific error responses
3. Verify authentication flow is working end-to-end
4. Test with a simple record before sending complex reports 