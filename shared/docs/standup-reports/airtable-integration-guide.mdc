# Standup Reporting Airtable Integration Guide

This guide explains how to use the dedicated Airtable integration module for publishing standup reports to our shared team tracking system.

## Overview

The `standup_reporting_airtable.js` module provides a robust way to publish standup reports to Airtable with proper authentication and error handling. This implementation addresses previous permission issues by including the required headers for the backend API.

## Usage

### Basic Report Submission

To submit a standup report to Airtable:

```javascript
import { submitReport } from '../assets/js/standup_reporting_airtable.js';

// Submit a report with default "Drafted" status
submitReport('path/to/your/report.mdc')
  .then(result => {
    if (result.success) {
      console.log(`Report submitted with ID: ${result.recordId}`);
    } else {
      console.error(`Submission failed: ${result.error}`);
    }
  });
```

### Complete Workflow

For a complete workflow that submits and then marks as completed:

```javascript
import { completeReportingWorkflow } from '../assets/js/standup_reporting_airtable.js';

completeReportingWorkflow('path/to/your/report.mdc')
  .then(result => {
    if (result.success) {
      console.log('Report workflow completed successfully');
    } else {
      console.error(`Workflow failed at ${result.stage}: ${result.error}`);
    }
  });
```

### Updating Status

To update the status of an existing report:

```javascript
import { updateStatus } from '../assets/js/standup_reporting_airtable.js';

updateStatus('rec123456789', 'Completed')
  .then(result => {
    if (result.success) {
      console.log('Status updated successfully');
    } else {
      console.error(`Update failed: ${result.error}`);
    }
  });
```

## Authentication Requirements

The module automatically adds required headers for the backend API:

```javascript
headers['X-Team'] = 'frontend';
headers['X-Airtable-Access'] = 'standup-reports';
headers['X-Resource-Type'] = 'standup';
```

Additionally, it uses the `secureFetch` function from `api-client.js`, which adds:

- `X-API-Key`: API key from session storage
- `X-Session-Token`: Authentication token from session storage
- `X-Client-ID`: Client identifier from URL parameters or session storage

## Report Format

Reports follow the standard format required by our team:

- Title format: "Front End Standup YYYY-MM-DD vXX"
- Required sections:
  - Summary
  - Current Build Features
  - Completed Tasks
  - Test Results
  - Challenges
  - Next Steps
  - Future Integrations
  - CTO Review

The parser automatically extracts these sections from MDC files and formats them for Airtable.

## Troubleshooting

### Diagnostic Tool

To diagnose Airtable connectivity issues:

```javascript
import { diagnoseConnection } from '../assets/js/standup_reporting_airtable.js';

diagnoseConnection()
  .then(diagnostic => {
    console.log('Diagnostic results:', diagnostic);
    
    if (diagnostic.status === 'failed') {
      console.error('Connection failed:', diagnostic.error);
    } else if (!diagnostic.authed) {
      console.warn('Not properly authenticated for Airtable access');
    }
  });
```

### Common Issues and Solutions

#### 1. Authentication Failures

**Symptoms:**
- Reports fail to publish with 401/403 errors
- "Not authorized" messages in console

**Solutions:**
- Ensure user is logged in with proper credentials
- Verify API key is present in session storage
- Check that user has editor or admin role

#### 2. Missing Headers

**Symptoms:**
- 400 errors from backend API
- "Missing required headers" messages

**Solutions:**
- Ensure X-Team and X-Airtable-Access headers are sent
- Check that X-Client-ID is properly extracted from URL

#### 3. Invalid Report Format

**Symptoms:**
- Reports publish but data is missing in Airtable
- Parser warnings in console

**Solutions:**
- Ensure MDC file follows the required format
- Check that all required sections are present
- Verify list items use proper markdown formatting

## Implementation Details

The module includes these key functions:

- `airtableFetch`: Enhanced API client with proper headers
- `formatReport`: Converts parsed data to Airtable format
- `parseReportMdc`: Extracts structured data from MDC content
- `submitReport`: Submits a report to Airtable
- `updateStatus`: Updates a report's status
- `diagnoseConnection`: Tests API connectivity
- `completeReportingWorkflow`: Full submission workflow

## Next Steps

Future enhancements planned:

1. Automated report generation from templates
2. Integration with GitHub for PR status
3. Automatic screenshots for visual progress
4. Slack notification after successful submission 