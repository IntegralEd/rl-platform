# Standup Report Publishing Guide

This guide explains how to publish standup reports to the shared Airtable and Slack for better team communication and tracking.

## Purpose

The standup report publishing system allows:
- Centralized tracking of frontend and backend development progress
- Standardized format for all team members
- Easy sharing of daily progress via Slack
- Historical record of development activities

## Airtable Integration

All standup reports are automatically published to a shared Airtable table:
- Table ID: `tblNfEQbQINXSN8C6`
- View ID: `viwIwhW0J7LWD4wNo`
- Airtable URL: [https://airtable.com/appqFjYLZiRlgZQDM/tblNfEQbQINXSN8C6/viwIwhW0J7LWD4wNo?blocks=hide](https://airtable.com/appqFjYLZiRlgZQDM/tblNfEQbQINXSN8C6/viwIwhW0J7LWD4wNo?blocks=hide)

### Table Structure

The Airtable table has the following fields:

| Field Name | Type | Description |
|------------|------|-------------|
| Title | Text | Report title (e.g., "April 6 Frontend Standup Report 03") |
| Date | Date | Date of the report |
| Team | Single select | Team identifier ("Frontend Cursor" or "Backend Cursor") |
| Reporter | Text | Name of the person/system creating the report |
| Summary | Long text | Brief summary of the report |
| Current Features | Multiple select | Features currently being worked on |
| Completed Tasks | Multiple select | Tasks completed since last report |
| Test Results | Multiple select | Results of tests performed |
| Challenges | Multiple select | Challenges encountered and solutions |
| Next Steps | Multiple select | Planned next steps |
| Future Integrations | Multiple select | Planned future integrations |
| CTO Review | Long text | CTO's review notes |
| Report Number | Number | Sequential report number |
| Branch | Text | Git branch associated with the report |
| Tags | Multiple select | Tags for filtering (frontend_cursor, backend_cursor) |
| Status | Single select | Report status (In Progress, Completed, Blocked) |

## How to Publish Reports

### Automatic Publishing

The standup report publisher automatically:
1. Parses `.mdc` files in the `shared/docs/standup-reports/` directory
2. Extracts structured data (features, tasks, tests, etc.)
3. Formats the data for Airtable compatibility
4. Publishes to the shared Airtable table

Frontend reports are tagged with `frontend_cursor` and backend reports with `backend_cursor`.

### Manual Publishing

To manually publish a report:

1. Create a standup report using the standard template
2. Import the publisher module:
   ```javascript
   import { publishToAirtable } from '../../shared/assets/js/standup-report-publisher.js';
   ```

3. Call the publish function:
   ```javascript
   const result = await publishToAirtable('/path/to/your-standup-report.mdc');
   console.log('Published:', result.success);
   ```

## Publishing to Slack

The last report of the day should be published to Slack for team visibility.

To publish to Slack:

1. Import the publisher module:
   ```javascript
   import { loadStandupReport, publishToSlack } from '../../shared/assets/js/standup-report-publisher.js';
   ```

2. Load and publish the report:
   ```javascript
   const report = await loadStandupReport('/path/to/your-standup-report.mdc');
   const result = await publishToSlack(report);
   console.log('Published to Slack:', result.success);
   ```

## Report Format Requirements

For reliable parsing, standup reports should follow this structure:

```markdown
# Report Title with Number

## Summary
Brief summary text here.

## Current Build Features
### Feature Category 1
- Feature item 1
- Feature item 2

## Completed Tasks
### Task Category 1
- Task item 1
- Task item 2

## Test Results
### Test Case: TEST-01 (Name)
- **Hypothesis**: What we expected
- **Test Method**: How we tested
- **Result**: ✅ Success or ⚠️ Warning or ❌ Failure
- **Notes**: Additional notes

## Challenges & Solutions
### Challenge 1: Description
Challenge details here.

**Solution**:
1. Step one of solution
2. Step two of solution

## Next Steps
### Priority 1
- Next step 1
- Next step 2

## Future Integrations
- Integration 1
- Integration 2

## CTO Review Notes
CTO review comments here.
```

## Troubleshooting

If publishing fails:

1. Check that your standup report follows the expected format
2. Verify API connectivity to Airtable
3. Check Airtable permissions
4. Look for errors in the browser console

## Help and Support

For questions or issues with the publishing system, contact the platform team lead or check the CloudWatch logs for error details. 