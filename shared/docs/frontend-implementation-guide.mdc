---
description: 
globs: 
alwaysApply: false
---
# Frontend Implementation Guide for Backend Integration

This guide provides practical steps for implementing the backend integration in frontend components of the Recursive Learning platform.

## Quick Start Implementation

### 1. Basic API Client Setup

```javascript
// api-client.js - Place in /shared/assets/js/
const API_BASE_URL = 'https://{api-id}.execute-api.us-east-2.amazonaws.com/{environment}/api/v1/context';
const API_KEY = 'your-api-key'; // Replace with environment variable in production

// Extract client and project IDs from URL
function getClientIdFromUrl() {
  const url = window.location.pathname;
  const matches = url.match(/\/(clients|admin\/pages)\/([^\/]+)/);
  return matches ? matches[2] : '';
}

function getProjectIdFromUrl() {
  const url = window.location.pathname;
  const matches = url.match(/\/(clients|admin\/pages)\/[^\/]+\/([^\/]+)/);
  return matches ? matches[2] : '';
}

// API Request function with proper headers
async function secureFetch(endpoint, options = {}) {
  const url = `${API_BASE_URL}${endpoint}`;
  const clientId = getClientIdFromUrl();
  const projectId = getProjectIdFromUrl();
  
  const defaultOptions = {
    credentials: 'include',
    mode: 'cors',
    headers: {
      'Content-Type': 'application/json',
      'X-API-Key': API_KEY,
      'X-Session-Token': sessionStorage.getItem('sessionToken') || '',
      'X-Client-ID': clientId,
      'X-Project-ID': projectId,
    }
  };
  
  try {
    const response = await fetch(url, { 
      ...defaultOptions, 
      ...options,
      headers: {
        ...defaultOptions.headers,
        ...options.headers
      }
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      handleApiError(response.status, errorData);
      throw new Error(`API Error: ${errorData.error?.message || 'Unknown error'}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API request failed:', error);
    // Report to CloudWatch
    reportErrorToCloudWatch(error, endpoint);
    throw error;
  }
}

// Error handler for API responses
function handleApiError(status, errorData) {
  switch (status) {
    case 401:
      // Redirect to login or refresh token
      sessionStorage.removeItem('sessionToken');
      window.location.href = '/login.html?redirect=' + encodeURIComponent(window.location.pathname);
      break;
    case 403:
      // Permission denied
      console.error('Permission denied:', errorData);
      break;
    case 429:
      // Rate limiting
      console.error('Rate limit exceeded. Please try again later.');
      break;
    default:
      // Generic error
      console.error('API error:', errorData);
  }
}

// Report errors to CloudWatch
function reportErrorToCloudWatch(error, endpoint) {
  // Implementation will depend on your logging service
  console.log('Reporting to CloudWatch:', error, endpoint);
}

export { secureFetch, getClientIdFromUrl, getProjectIdFromUrl };
```

### 2. Authentication Implementation

```javascript
// auth.js - Place in /shared/assets/js/
import { secureFetch } from './api-client.js';

// Initialize authentication on page load
async function initAuth() {
  // First check for existing token
  if (await validateStoredToken()) {
    console.log('Using existing token');
    return true;
  }
  
  // Then check for URL parameters or review token
  if (await authenticateFromUrl()) {
    console.log('Authenticated from URL');
    return true;
  }
  
  // If no authentication, redirect to login
  console.log('No valid authentication found');
  return false;
}

// Validate existing token
async function validateStoredToken() {
  const token = sessionStorage.getItem('sessionToken');
  if (!token) return false;
  
  try {
    // Verify token with backend
    const response = await secureFetch('/api/v1/session', {
      headers: {
        'X-Session-Token': token
      }
    });
    
    if (response.valid) {
      // Store user permissions from token
      storeUserPermissions(response.permissions);
      return true;
    }
    
    // Token invalid, remove it
    sessionStorage.removeItem('sessionToken');
    return false;
  } catch (error) {
    console.error('Token validation failed:', error);
    sessionStorage.removeItem('sessionToken');
    return false;
  }
}

// Extract auth parameters from URL
async function authenticateFromUrl() {
  const urlParams = new URLSearchParams(window.location.search);
  
  // Check for review token
  const reviewToken = urlParams.get('review_token');
  if (reviewToken) {
    return await authenticateWithReviewToken(reviewToken);
  }
  
  // Check for session token
  const sessionToken = urlParams.get('token');
  if (sessionToken) {
    sessionStorage.setItem('sessionToken', sessionToken);
    return await validateStoredToken();
  }
  
  return false;
}

// Authenticate with review token
async function authenticateWithReviewToken(token) {
  try {
    const response = await secureFetch('/api/v1/verify-review-token', {
      method: 'POST',
      body: JSON.stringify({ token })
    });
    
    if (response.valid) {
      sessionStorage.setItem('sessionToken', response.sessionToken);
      storeUserPermissions(response.permissions);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('Review token authentication failed:', error);
    return false;
  }
}

// Store user permissions in session storage
function storeUserPermissions(permissions) {
  sessionStorage.setItem('userPermissions', JSON.stringify(permissions));
}

// Permission checking function
function hasPermission(permissionName) {
  try {
    const userPermissions = JSON.parse(sessionStorage.getItem('userPermissions') || '[]');
    return userPermissions.includes('*') || userPermissions.includes(permissionName);
  } catch (error) {
    console.error('Permission check failed:', error);
    return false;
  }
}

// Render UI based on permissions
function renderPermissionBasedUI() {
  document.querySelectorAll('[data-requires-permission]').forEach(element => {
    const requiredPermission = element.getAttribute('data-requires-permission');
    if (!hasPermission(requiredPermission)) {
      element.style.display = 'none';
    }
  });
}

export { initAuth, hasPermission, renderPermissionBasedUI };
```

### 3. Content Retrieval Implementation

```javascript
// content.js - Place in /shared/assets/js/
import { secureFetch, getClientIdFromUrl, getProjectIdFromUrl } from './api-client.js';

// Get appropriate content based on page type
async function loadContent() {
  const pageType = getPageType();
  const clientId = getClientIdFromUrl();
  const projectId = getProjectIdFromUrl();
  
  let endpoint;
  switch (pageType) {
    case 'live':
      endpoint = `/api/v1/${clientId}/${projectId}/content`;
      break;
    case 'review':
      const reviewToken = new URLSearchParams(window.location.search).get('review_token');
      endpoint = `/api/v1/${clientId}/${projectId}/review/${reviewToken || ''}`;
      break;
    case 'temp':
      endpoint = `/api/v1/${clientId}/${projectId}/preview`;
      break;
    case 'admin':
      endpoint = `/api/v1/admin/${clientId}/${projectId}`;
      break;
    default:
      throw new Error('Unknown page type');
  }
  
  return await secureFetch(endpoint);
}

// Detect page type from URL
function getPageType() {
  const path = window.location.pathname;
  if (path.includes('_live.html')) return 'live';
  if (path.includes('_review.html')) return 'review';
  if (path.includes('_temp.html')) return 'temp';
  if (path.includes('_admin.html')) return 'admin';
  return 'unknown';
}

export { loadContent, getPageType };
```

### 4. Comment System Integration

```javascript
// comments.js - Place in /shared/assets/js/
import { secureFetch, getClientIdFromUrl, getProjectIdFromUrl } from './api-client.js';
import { hasPermission } from './auth.js';

// Initialize Qipu comment system
async function initComments() {
  // Only initialize if Qipu script is available
  if (typeof Qipu === 'undefined') {
    console.error('Qipu comment system not loaded');
    return;
  }
  
  const pageType = window.location.pathname.includes('_review.html') ? 'review' : 'edit';
  const reviewSession = new URLSearchParams(window.location.search).get('session') || 'default';
  
  // Get user data from session storage
  const userData = JSON.parse(sessionStorage.getItem('userData') || '{}');
  
  // Initialize Qipu with user data
  Qipu.init({
    userId: userData.userId || 'anonymous',
    userName: userData.name || 'Anonymous User',
    userEmail: userData.email || '',
    userRole: userData.role || 'viewer',
    projectId: getProjectIdFromUrl(),
    clientId: getClientIdFromUrl(),
    reviewSession: reviewSession,
    mode: pageType,
    apiEndpoint: `/api/v1/${getClientIdFromUrl()}/${getProjectIdFromUrl()}/comments`,
    permissions: {
      canComment: hasPermission('create_comments'),
      canEdit: hasPermission('edit_comments'),
      canDelete: hasPermission('delete_comments'),
      canResolve: hasPermission('resolve_comments')
    }
  });
  
  // Add comment submission handler
  Qipu.on('commentSubmitted', logCommentInteraction);
}

// Log comment interactions
async function logCommentInteraction(commentData) {
  try {
    await secureFetch(`/api/v1/log`, {
      method: 'POST',
      body: JSON.stringify({
        user_id: commentData.userId,
        org_id: sessionStorage.getItem('orgId'),
        interaction_type: 'comment',
        content: commentData.text,
        metadata: {
          commentId: commentData.id,
          projectId: getProjectIdFromUrl(),
          clientId: getClientIdFromUrl(),
          timestamp: new Date().toISOString()
        }
      })
    });
  } catch (error) {
    console.error('Failed to log comment interaction:', error);
  }
}

export { initComments };
```

### 5. Implementing CloudWatch Monitoring

```javascript
// monitoring.js - Place in /shared/assets/js/
import { secureFetch } from './api-client.js';

// Initialize performance monitoring
function initMonitoring() {
  // Track page load performance
  window.addEventListener('load', () => {
    setTimeout(() => {
      const perfData = window.performance.timing;
      const pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;
      logPerformanceMetric('page_load', pageLoadTime);
    }, 0);
  });
  
  // Track API call performance
  monkeyPatchFetch();
  
  // Track errors
  window.addEventListener('error', handleError);
  window.addEventListener('unhandledrejection', handleRejection);
}

// Send performance metric to backend
async function logPerformanceMetric(metricName, value) {
  try {
    await secureFetch('/api/v1/metrics', {
      method: 'POST',
      body: JSON.stringify({
        metricName,
        value,
        unit: 'Milliseconds',
        dimensions: {
          page: window.location.pathname,
          userAgent: navigator.userAgent
        }
      })
    });
  } catch (error) {
    console.error('Failed to log metric:', error);
  }
}

// Track API performance by monkey patching fetch
function monkeyPatchFetch() {
  const originalFetch = window.fetch;
  window.fetch = async function(url, options) {
    const startTime = performance.now();
    try {
      const response = await originalFetch(url, options);
      const endTime = performance.now();
      const duration = endTime - startTime;
      
      // Only log performance for our API calls
      if (url.toString().includes('api.execute-api.us-east-2.amazonaws.com')) {
        logPerformanceMetric('api_call', duration);
      }
      
      return response;
    } catch (error) {
      const endTime = performance.now();
      logPerformanceMetric('api_error', endTime - startTime);
      throw error;
    }
  };
}

// Handle JavaScript errors
function handleError(event) {
  reportErrorToBackend({
    type: 'error',
    message: event.message,
    source: event.filename,
    line: event.lineno,
    column: event.colno,
    stack: event.error?.stack,
    timestamp: new Date().toISOString()
  });
}

// Handle promise rejections
function handleRejection(event) {
  reportErrorToBackend({
    type: 'unhandledrejection',
    message: event.reason.message || 'Promise rejected',
    stack: event.reason.stack,
    timestamp: new Date().toISOString()
  });
}

// Report errors to backend
async function reportErrorToBackend(errorData) {
  try {
    await secureFetch('/api/v1/error', {
      method: 'POST',
      body: JSON.stringify(errorData)
    });
  } catch (error) {
    // Just log to console if reporting fails
    console.error('Error reporting failed:', error);
  }
}

export { initMonitoring, logPerformanceMetric };
```

## Integration Checklist

### Setup and Configuration
- [ ] Add API client script to shared assets
- [ ] Configure environment-specific API endpoints
- [ ] Store API keys securely (not in client-side code for production)
- [ ] Implement URL parsing for client/project extraction

### Authentication and Authorization
- [ ] Implement token storage in sessionStorage
- [ ] Add token validation and refresh logic
- [ ] Implement permission-based UI rendering
- [ ] Support review token authentication
- [ ] Add authentication error handling

### Content Integration
- [ ] Set up content loading based on page type
- [ ] Implement content rendering with proper error handling
- [ ] Add loading states for content requests
- [ ] Set up caching for improved performance

### Comments and Review System
- [ ] Integrate Qipu comment system
- [ ] Configure comment permissions based on user role
- [ ] Implement comment logging
- [ ] Add review session management

### Error Handling and Monitoring
- [ ] Set up CloudWatch metric reporting
- [ ] Implement error tracking and reporting
- [ ] Add performance monitoring
- [ ] Create user-friendly error messages

## Testing Your Integration

Follow the [Backend Integration Test Plan](mdc:backend-integration-test-plan.mdc) to validate your implementation against the API.

## Common Issues and Solutions

### CORS Errors
If you encounter CORS issues:
1. Verify your origin is in the allowed list
2. Check that all required headers are included
3. Ensure credentials mode is properly set
4. Verify your API key is valid

### Authentication Failures
If authentication is failing:
1. Check browser console for token validation errors
2. Verify session storage is working properly
3. Ensure JWT hasn't expired
4. Check that all required headers are being sent

### Performance Issues
If experiencing slow performance:
1. Implement request caching where appropriate 
2. Minimize unnecessary API calls
3. Use the monitoring tools to identify bottlenecks
4. Consider implementing lazy loading for content

## Next Steps

After completing basic integration:
1. Add comprehensive error handling
2. Implement automated testing
3. Optimize for performance
4. Set up monitoring dashboards
5. Document any issues or limitations for the backend team 