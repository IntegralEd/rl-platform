# Backend Integration Test Plan

This document outlines the test plan for validating the integration between the Recursive Learning frontend and the REST API Lambda backend.

## Test Environment Setup

### Prerequisites
- [ ] Local development environment configured
- [ ] Access to development API endpoint
- [ ] Test user accounts with various roles
- [ ] API keys for development environment

### Test Data
- [ ] Create test projects for each client ID
- [ ] Prepare test review tokens
- [ ] Generate sample authentication JWTs
- [ ] Set up test threads in OpenAI

## Test Phases

### Phase 1: Authentication and Authorization

#### 1.1 JWT Authentication Tests
| Test ID | Description | Expected Result | Prerequisites |
|---------|-------------|-----------------|---------------|
| AUTH-01 | Verify valid JWT token authentication | Successful API response with 200 status | Valid JWT token |
| AUTH-02 | Test with expired JWT token | 401 Unauthorized response | Expired JWT token |
| AUTH-03 | Test with invalid signature | 401 Unauthorized response | Tampered JWT token |
| AUTH-04 | Test token refresh mechanism | New valid JWT token received | About-to-expire token |
| AUTH-05 | Test session persistence | Session maintained across page loads | Valid authenticated session |

#### 1.2 Role-Based Access Tests
| Test ID | Description | Expected Result | Prerequisites |
|---------|-------------|-----------------|---------------|
| RBAC-01 | Access admin endpoint with admin role | Successful access with 200 status | User with admin role |
| RBAC-02 | Access admin endpoint with insufficient role | 403 Forbidden response | User with student role |
| RBAC-03 | Verify role-specific UI elements | Correct UI elements shown/hidden | Users with different roles |
| RBAC-04 | Test permission-based functionality | Functions enabled/disabled appropriately | Multiple test users |

#### 1.3 Review Token Tests
| Test ID | Description | Expected Result | Prerequisites |
|---------|-------------|-----------------|---------------|
| TOKEN-01 | Access with valid review token | Successful access to review page | Valid review token |
| TOKEN-02 | Access with expired review token | Error message about expired token | Expired review token |
| TOKEN-03 | Access with invalid review token | Error message about invalid token | Malformed token |
| TOKEN-04 | Verify project-specific token restrictions | Access only to specified project | Project-specific token |

### Phase 2: API Functionality Tests

#### 2.1 Content Retrieval Tests
| Test ID | Description | Expected Result | Prerequisites |
|---------|-------------|-----------------|---------------|
| CONT-01 | Get live content | Correct content returned for live page | Valid credentials |
| CONT-02 | Get review content | Correct content with review UI elements | Review token or permissions |
| CONT-03 | Get preview content | Latest draft content displayed | Contributor or higher role |
| CONT-04 | Test content caching | Faster subsequent responses | Initial content load |

#### 2.2 Comment Integration Tests
| Test ID | Description | Expected Result | Prerequisites |
|---------|-------------|-----------------|---------------|
| COMM-01 | Add comment as client_sme | Comment saved and displayed | client_sme role |
| COMM-02 | Reply to comment as admin | Reply saved and linked to original | admin role |
| COMM-03 | Edit existing comment | Comment updated successfully | Comment owner |
| COMM-04 | Delete comment | Comment removed | Comment owner or admin |

#### 2.3 Logging Tests
| Test ID | Description | Expected Result | Prerequisites |
|---------|-------------|-----------------|---------------|
| LOG-01 | Verify interaction logging | Interaction record in Airtable | Completed interaction |
| LOG-02 | Test error logging | Error details recorded | Triggered error condition |
| LOG-03 | Verify CloudWatch metrics | Metrics visible in CloudWatch | API usage activity |

### Phase 3: CORS and Security Tests

#### 3.1 CORS Tests
| Test ID | Description | Expected Result | Prerequisites |
|---------|-------------|-----------------|---------------|
| CORS-01 | Request from allowed origin | Successful response with CORS headers | Allowed origin |
| CORS-02 | Request from disallowed origin | CORS error | Disallowed origin |
| CORS-03 | Preflight OPTIONS request | Correct preflight response | CORS-enabled browser |
| CORS-04 | Test with credentials | Successful authenticated request | Include credentials mode |

#### 3.2 Security Tests
| Test ID | Description | Expected Result | Prerequisites |
|---------|-------------|-----------------|---------------|
| SEC-01 | Test with missing API key | 401 Unauthorized response | Omit API key |
| SEC-02 | Test with invalid API key | 401 Unauthorized response | Invalid API key |
| SEC-03 | Test XSS protection | Script injection prevented | XSS payload |
| SEC-04 | Test rate limiting | 429 Too Many Requests after limit | Automated test script |

## Prioritized Test Execution

### Sprint 1: Authentication and Core API
1. JWT Authentication (AUTH-01, AUTH-02)
2. Basic RBAC (RBAC-01, RBAC-02)
3. Content Retrieval (CONT-01, CONT-02)
4. CORS Validation (CORS-01, CORS-02)

### Sprint 2: Tokenized Review System
1. Review Token Tests (TOKEN-01, TOKEN-02, TOKEN-03)
2. Comment Integration (COMM-01, COMM-02)
3. Logging Verification (LOG-01)
4. Security Baseline (SEC-01, SEC-02)

### Sprint 3: Error Handling and Edge Cases
1. Complete remaining tests
2. Performance under load
3. Edge case scenarios
4. Integration with monitoring systems

## Test Reporting

For each test:
1. Record actual vs. expected results
2. Capture screenshots or logs of issues
3. Document any workarounds implemented
4. Track issue resolution

## Next Steps After Initial Testing
- Develop automation scripts for regression testing
- Implement continuous testing in CI/CD pipeline
- Expand test coverage based on user feedback
- Schedule regular security and performance audits 