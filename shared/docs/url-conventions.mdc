# URL and Asset Path Conventions

## Core Principles

1. All admin assets must be centralized in `/admin/assets/`
2. Client-specific assets must be in `/shared/assets/` or `/clients/{client_id}/assets/`
3. Reusable components must be in `/shared/page_ingredients/`

## Deprecated Paths (DO NOT USE)
```
/admin/css/                    -> Use /admin/assets/css/
/admin/pages/{client}/assets/  -> Use /admin/assets/ or /shared/assets/
```

## Asset URL Structure

### Admin Assets
```
/admin/assets/
├── css/
│   ├── main.css              # Main admin stylesheet
│   ├── components/           # Component styles
│   ├── layout/              # Layout styles
│   └── themes/              # Theme variations
└── js/
    ├── core/               # Core admin functionality
    └── {feature}/         # Feature-specific scripts
```

### Shared Assets
```
/shared/assets/
├── css/
├── js/
└── img/
```

### Client Assets
```
/clients/{client_id}/assets/
```

## Page Ingredients
All reusable components must be placed in:
```
/shared/page_ingredients/{component_type}/
```

## URL Patterns

### Admin Pages
- Admin pages: `/admin/pages/{client_id}/{project}/`
- Admin assets: `/admin/assets/{type}/{file}`

### Client Pages
- Client pages: `/clients/{client_id}/{project}/`
- Client assets: `/clients/{client_id}/assets/{type}/{file}`

### Shared Resources
- Shared components: `/shared/page_ingredients/{component}/{file}`
- Shared assets: `/shared/assets/{type}/{file}`

## Migration Notes

1. Move all admin CSS from `/admin/css/` to `/admin/assets/css/`
2. Move client-specific assets to appropriate shared or client directories
3. Update all asset references in HTML files
4. Remove deprecated directories after migration

## Security Considerations

1. Admin assets must not be accessible from client pages
2. Client assets must be scoped to their specific client directory
3. Shared assets must be carefully reviewed for multi-tenant safety

## Implementation Checklist

- [ ] Audit existing asset locations
- [ ] Create new directory structure
- [ ] Migrate assets to new locations
- [ ] Update HTML references
- [ ] Remove deprecated directories
- [ ] Test all affected pages

## File Naming Patterns
- `_admin.html` - Admin interface pages
- `_live.html` - Production/live versions
- `_review.html` - Review session pages
- `_temp.html` - Temporary/preview versions

## Directory Structure Rules

### Admin Pages
- Pattern: `/admin/pages/{client}/{project}/_admin.html`
- Example: `/admin/pages/st/goalsetter/goalsetter_admin.html`
- All admin pages must be in the `/admin/pages/` directory
- Client-specific admin pages must be in their respective client subdirectories

### Client Pages
- Pattern: `/clients/{client}/{project}/{page}`
- Example: `/clients/st/goalsetter/goalsetter_live.html`
- All client-specific pages must be in the `/clients/` directory
- Each client should have their own subdirectory
- Project files should be grouped in project-specific subdirectories

### Review Pages
- Pattern: `/clients/{client}/{project}/_review.html`
- Example: `/clients/st/goalsetter/goalsetter_review.html`
- Review pages must be in their respective project directories
- Review pages are designed to be tokenized for review sessions

### Live/Production Pages
- Pattern: `/clients/{client}/{project}/_live.html`
- Example: `/clients/st/goalsetter/goalsetter_live.html`
- Production versions must be in their respective project directories
- These are the primary pages for iframe embedding

## Validation
- The admin tree interface validates these patterns
- Invalid paths will be flagged in the console
- URL validation is enforced through `admintree.js`

## Best Practices
1. Always use the appropriate suffix for page type
2. Maintain consistent naming between related files
3. Keep all project files in their designated directories
4. Use the admin tree interface to verify correct paths
5. Check console for URL convention violations

## Overview
This document outlines the URL conventions for the Recursive Learning Platform, ensuring a consistent and organized structure across all projects.

## URL Set Descriptions

- **_live.html**
  - Location: `/clients/[client]/[project]/`
  - Purpose: Serves the production version of the project, displaying the finalized content to end users.

- **_temp.html**
  - Location: `/clients/[client]/[project]/`
  - Purpose: Used for staging or testing purposes, allowing for previewing changes before they go live.

- **_review.html**
  - Location: `/clients/[client]/[project]/`
  - Purpose: Facilitates review sessions, often with additional commenting or feedback features enabled.

- **_admin.html**
  - Location: `/admin/pages/[client]/[project]/`
  - Purpose: Provides administrative controls and settings for managing the project, accessible only to authorized users.

## Rules
- `_admin.html` pages should not be placed within the client tree.
- All admin pages must reside in the `/admin/pages/` directory structure to maintain a clear separation between client-specific and admin interfaces.
- Client-specific pages should reside within their respective client directories under `/clients/`.
- Shared assets and components should be placed in the `/shared/` directory to maintain a clear separation of concerns.

## URL Conventions for Backend Integration

The URL structure in our platform serves not only as a navigational system but also as a key part of our authentication and authorization framework. Backend services use URL patterns to determine access rights and map to internal project identifiers.

### URL Pattern to User Role Mapping

Different URL patterns have specific role requirements for access:

| URL Pattern | Required Role(s) | Description |
|-------------|-----------------|-------------|
| `/clients/{client}/{project}/{project}_live.html` | student, teacher | Production content pages accessible to students and teachers |
| `/clients/{client}/{project}/{project}_review.html` | client_sme, team_leader | Review pages for client stakeholders and team leads |
| `/clients/{client}/{project}/{project}_temp.html` | contributor, admin, team_leader | Preview/staging pages for internal team members |
| `/admin/pages/{client}/{project}/{project}_admin.html` | admin, org_admin, team_leader | Admin interfaces for configuration and management |

### Backend URL Processing

Backend services should process URLs to extract key components:

```javascript
const extractURLComponents = (url) => {
  const patterns = {
    live: /\/clients\/([^\/]+)\/([^\/]+)\/([^\/]+)_live\.html$/,
    review: /\/clients\/([^\/]+)\/([^\/]+)\/([^\/]+)_review\.html$/,
    temp: /\/clients\/([^\/]+)\/([^\/]+)\/([^\/]+)_temp\.html$/,
    admin: /\/admin\/pages\/([^\/]+)\/([^\/]+)\/([^\/]+)_admin\.html$/
  };
  
  for (const [type, pattern] of Object.entries(patterns)) {
    const match = url.match(pattern);
    if (match) {
      return {
        type,
        client: match[1],
        project: match[2],
        file: match[3],
        isValid: true
      };
    }
  }
  
  return { isValid: false };
};
```

### Project Access Validation

When a request is made to a specific URL, backend services must validate:
1. The user has a valid role for accessing that URL type
2. The user has access to the specific project (via `projects_active_at_id`)
3. The client token in the URL maps to a valid internal project

Example backend validation flow:
```javascript
const validateAccess = (url, user) => {
  // Extract components from URL
  const urlComponents = extractURLComponents(url);
  if (!urlComponents.isValid) {
    return {
      isValid: false,
      error: "INVALID_URL",
      message: "The requested URL does not match any valid pattern"
    };
  }
  
  // Check if user has the required role for this URL type
  const requiredRoles = getRequiredRolesForUrlType(urlComponents.type);
  if (!requiredRoles.includes(user.roleLevel)) {
    return {
      isValid: false,
      error: "INSUFFICIENT_ROLE",
      message: `This URL requires one of these roles: ${requiredRoles.join(', ')}`
    };
  }
  
  // Validate user has access to this specific project
  if (!validateProjectAccess(user, urlComponents.client, urlComponents.project)) {
    return {
      isValid: false,
      error: "PROJECT_ACCESS_DENIED",
      message: "You do not have access to this project"
    };
  }
  
  return {
    isValid: true,
    urlComponents
  };
};
```

### CloudWatch Metrics for URL Access

Backend services should log URL access patterns to CloudWatch using the URL components:

```javascript
const logUrlAccess = (urlComponents, user) => {
  return {
    metricName: "URLAccess",
    dimensions: {
      URLType: urlComponents.type,
      ClientID: urlComponents.client,
      ProjectID: urlComponents.project,
      UserRole: user.roleLevel
    },
    value: 1,
    unit: "Count",
    timestamp: new Date().toISOString()
  };
};
```

### Admin Page URL Integration with Metrics

The `_admin.html` pages will consume CloudWatch metrics for specific URL patterns:

```
GET /api/v1/admin/{client}/{project}/metrics/url-access
```

This endpoint returns aggregated data about URL access patterns, which helps administrators understand usage patterns and identify potential issues with permissions or access. 