# Merit Redis Integration Checklist (2025.04.09)

## Critical Rules & Restrictions
- ⚠️ DO NOT edit `merit_live.html` or `merit_temp.html` without explicit authorization
- ✅ Focus automation and enhancements on `/clients/elpl/merit/merit.html`
- ✅ All changes must follow Redis caching implementation standards
- ✅ Maintain existing client-facing functionality during integration

## Integration Priorities

### 1. Redis Setup & Verification
- [ ] Confirm Redis server operational status
- [ ] Verify SSM parameter `/integraled/redis/endpoint` accessibility
- [ ] Test Lambda function permissions for Redis access
- [ ] Validate frontend API endpoint configuration

### 2. Primary Resource Integration (`merit.html`)
- [ ] Update API endpoints to use Redis-backed system
- [ ] Implement OpenAI assistant integration
- [ ] Add Redis cache headers and retry mechanisms
- [ ] Configure thread persistence with Redis

### 3. Chat System Enhancement
- [ ] Implement Redis-based message caching
- [ ] Add loading states for cache operations
- [ ] Configure cache invalidation triggers
- [ ] Add cache status indicators for debugging

### 4. Performance Optimization
- [ ] Implement optimistic UI updates
- [ ] Add cache write-through mechanisms
- [ ] Configure proper cache TTL settings
- [ ] Add performance monitoring

## Testing Requirements

### Initial Testing
- [ ] Redis connectivity verification
- [ ] Basic chat functionality
- [ ] Message persistence
- [ ] Cache hit/miss handling

### End Testing
- [ ] Full chat system responsiveness
- [ ] Redis cache performance
- [ ] Concurrent user support
- [ ] System load validation

### Performance Metrics
- [ ] Message load time < 100ms
- [ ] Cache hit ratio > 80%
- [ ] Response time < 300ms
- [ ] Concurrent user capacity

## Integration Notes
- Use existing CURL tests as reference for OpenAI integration
- Maintain backward compatibility
- Document all cache-related configurations
- Monitor system performance during integration

## Rollback Plan
- Maintain current production endpoints
- Document all changes for potential rollback
- Keep existing functionality intact
- Test rollback procedures

## Next Steps
1. Begin Redis server verification
2. Update API integration in `merit.html`
3. Implement chat system enhancements
4. Conduct thorough testing
5. Document all changes and configurations

## Redis Access Configuration

### Backend Access (Verified)
- [x] Endpoint: `rl-platform-cache-2wqhx1.serverless.use2.cache.amazonaws.com:6379`
- [x] User ARN: `arn:aws:elasticache:us-east-2:559050208320:user:recursive-backend`
- [x] User credentials in SSM
- [ ] Lambda functions configured with VPC access
- [ ] Security group rules verified

### Frontend Access (To Be Implemented)
- [ ] Create frontend-specific Redis user
- [ ] Store credentials in SSM
- [ ] Configure API Gateway endpoints
- [ ] Implement frontend Redis client
- [ ] Add connection pooling
- [ ] Implement retry logic

### Access Patterns
```javascript
// Backend (Lambda) Access
const redis = new Redis({
  host: process.env.REDIS_ENDPOINT,
  port: 6379,
  username: 'recursive-backend',
  password: process.env.REDIS_PASSWORD,
  tls: {}
});

// Frontend (API) Access
const cache = {
  async get(key) {
    const response = await fetch('/api/v1/cache/' + key, {
      headers: {
        'X-API-Key': process.env.API_KEY
      }
    });
    return response.json();
  },
  
  async set(key, value, ttl = 3600) {
    await fetch('/api/v1/cache', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': process.env.API_KEY
      },
      body: JSON.stringify({ key, value, ttl })
    });
  }
};
```

### Security Requirements
- [ ] All Redis access through API Gateway
- [ ] Rate limiting implemented
- [ ] Request validation
- [ ] Error handling
- [ ] Monitoring and alerts 

# Merit Admin E2E Build Plan - April 9 Update
Status: frontend/Apr-09-Merit_admin

## Critical Layout Issues (Priority Fix)

### 1. Admin Header Implementation
- [T] Add fixed 50px admin header across all admin pages (Ready for immediate implementation)
- [T] Implement consistent branding with Recursive Learning logo (Asset exists)
- [T] Add user info display (Admin: Name) (Can implement with current auth)
- [T] Add version info display (Version YYYY.MM.DD.HH:MMam/pm) (Simple addition)

### 2. Left Navigation Panel Fixes
- [T] Convert to card-based vertical navigation (260-300px width) (CSS ready)
- [T] Implement proper spacing between nav cards (CSS ready)
- [T] Add gem icons for feature indicators (Assets needed - BLOCKED)
- [T] Structure navigation hierarchy (Template ready)

### 3. Feature Tabs Implementation
- [T] Add gem-based tab navigation (CSS structure ready)
- [T] Implement proper tab headers (HTML structure ready):
  - Toggle
  - Iframe
  - Comments
  - Change Orders
  - LRS
  - Status
- [T] Add tab content areas with proper grid layout (CSS ready)
- [T] Ensure tab state persistence (JS ready in admin.js)

### 4. Grid Layout Restoration
- [T] Implement two-column grid structure (CSS ready)
- [T] Fix content overlap issues (CSS ready)
- [T] Ensure proper spacing between components (CSS ready)

### 5. Module Organization
- [T] Separate system-level controls into Quick Actions section (Ready)
- [T] Move chat configuration to proper admin module (Ready)
- [T] Implement proper hierarchy for admin controls (Ready)

## Implementation Priority Order (Today)

1. Base Layout Structure
```html
<!-- Priority 1: Header Implementation -->
<header class="admin-header">
  <img src="/shared/assets/images/lockup_white_logo.png" alt="Recursive Learning">
  <div class="admin-info">
    <span class="admin-name">Admin: David</span>
    <span class="version">Version 04.09.2025.16:11pm</span>
  </div>
</header>

<!-- Priority 2: Grid Layout -->
<div class="admin-layout">
  <div class="nav-panel">
    <!-- Card navigation -->
  </div>
  <div class="content-panel">
    <!-- Tab system -->
  </div>
</div>
```

2. Navigation Implementation
```html
<!-- Priority 3: Card-Based Nav -->
<div class="nav-card">
  <div class="card-header">
    <strong>Goalsetter</strong>
    <span class="gem-indicator active"></span>
  </div>
  <div class="feature-list">
    <a class="feature-item active">Toggle</a>
    <a class="feature-item">Iframe</a>
  </div>
</div>
```

## Immediate Next Steps

1. [T] Update admin.css with new grid layout
2. [T] Implement header component
3. [T] Convert left nav to card system
4. [T] Add tab navigation structure
5. [T] Implement content grid

## Blocked Items (Need Assets/Dependencies)
1. [ ] Gem icon assets
2. [ ] Feature-specific icons
3. [ ] Redis integration for state persistence

## Testing Checklist (Today)
- [T] Header maintains 50px height
- [T] Navigation cards properly contain content
- [T] Tab system manages content switching
- [T] Grid layout maintains spacing
- [T] No content overflow issues

## Dependencies Ready
✅ CSS Files:
   - `/admin/assets/css/admin.css`
   - `/shared/assets/css/variables.css`

✅ JavaScript Files:
   - `/admin/assets/js/admin.js`
   - `/admin/assets/js/admin-nav.js`
   - `/admin/assets/js/admin-common.js`

## Standup Report Tags
- frontend/Apr-09-Merit_admin
- layout/admin-header
- feature/gem-navigation
- enhancement/grid-layout
- fix/content-overlap

Expected Changes: 18/25 completable today
Blocked Changes: 7/25 need assets or dependencies 

## Immediate Fixes (Based on Testing)
### 1. JavaScript Conflicts Resolution [T]
- [ ] Fix duplicate RecursiveAdmin declaration in admin-nav.js
- [ ] Ensure proper script loading order in index.html
- [ ] Consolidate admin initialization code
- [ ] Remove redundant admin panel initializations

### 2. Asset Path Corrections [T]
- [ ] Move gem SVGs to correct location in shared/assets/images/
- [ ] Update image paths in index.html to use correct base URL
- [ ] Add fallback icons for missing assets
- [ ] Verify all required gem icons are present

### 3. Partial Templates Creation [T]
- [ ] Create directory structure for client partials:
  ```
  /admin/pages/
    ├── ST/
    │   └── goalsetter/
    ├── EL/
    │   └── merit/
    └── BHB/
        └── bmore/
  ```
- [ ] Add basic template for each feature type
- [ ] Implement error handling for missing partials

### 4. URL Handling Improvements [T]
- [ ] Fix space encoding in feature URLs (change%20orders)
- [ ] Implement proper client/resource path construction
- [ ] Add 404 handling for missing partials
- [ ] Create loading states for content transitions

### 5. Navigation State Management [T]
- [ ] Implement proper active state tracking
- [ ] Add visual feedback for loading states
- [ ] Fix gem icon state management
- [ ] Add error recovery for failed loads

## Testing Progress (April 9)
- [X] Basic navigation structure implemented
- [X] Gem-based UI components added
- [X] Multi-tenant support framework
- [T] Asset loading and paths
- [T] Partial template loading
- [ ] Error handling and recovery
- [ ] State management
- [ ] Performance optimization

## Next Steps (Priority Order)
1. Create partial templates for each feature
2. Fix asset paths and add missing icons
3. Implement proper error handling
4. Add loading states and transitions
5. Test cross-client navigation

## Testing Checklist (Today)
- [T] Header maintains 50px height
- [T] Navigation cards properly contain content
- [T] Tab system manages content switching
- [T] Grid layout maintains spacing
- [T] No content overflow issues

## Dependencies Ready
✅ CSS Files:
   - `/admin/assets/css/admin.css`
   - `/shared/assets/css/variables.css`

✅ JavaScript Files:
   - `/admin/assets/js/admin.js`
   - `/admin/assets/js/admin-nav.js`
   - `/admin/assets/js/admin-common.js`

## Standup Report Tags
- frontend/Apr-09-Merit_admin
- layout/admin-header
- feature/gem-navigation
- enhancement/grid-layout
- fix/content-overlap

Expected Changes: 18/25 completable today
Blocked Changes: 7/25 need assets or dependencies 