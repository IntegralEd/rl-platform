# Merit Redis Integration Checklist (2025.04.09)

## Critical Rules & Restrictions
- ⚠️ DO NOT edit `merit_live.html` or `merit_temp.html` without explicit authorization
- ✅ Focus automation and enhancements on `/clients/elpl/merit/merit.html`
- ✅ All changes must follow Redis caching implementation standards
- ✅ Maintain existing client-facing functionality during integration

## Integration Priorities

### 1. Redis Setup & Verification
- [ ] Confirm Redis server operational status
- [ ] Verify SSM parameter `/integraled/redis/endpoint` accessibility
- [ ] Test Lambda function permissions for Redis access
- [ ] Validate frontend API endpoint configuration

### 2. Primary Resource Integration (`merit.html`)
- [ ] Update API endpoints to use Redis-backed system
- [ ] Implement OpenAI assistant integration
- [ ] Add Redis cache headers and retry mechanisms
- [ ] Configure thread persistence with Redis

### 3. Chat System Enhancement
- [ ] Implement Redis-based message caching
- [ ] Add loading states for cache operations
- [ ] Configure cache invalidation triggers
- [ ] Add cache status indicators for debugging

### 4. Performance Optimization
- [ ] Implement optimistic UI updates
- [ ] Add cache write-through mechanisms
- [ ] Configure proper cache TTL settings
- [ ] Add performance monitoring

## Testing Requirements

### Initial Testing
- [ ] Redis connectivity verification
- [ ] Basic chat functionality
- [ ] Message persistence
- [ ] Cache hit/miss handling

### End Testing
- [ ] Full chat system responsiveness
- [ ] Redis cache performance
- [ ] Concurrent user support
- [ ] System load validation

### Performance Metrics
- [ ] Message load time < 100ms
- [ ] Cache hit ratio > 80%
- [ ] Response time < 300ms
- [ ] Concurrent user capacity

## Integration Notes
- Use existing CURL tests as reference for OpenAI integration
- Maintain backward compatibility
- Document all cache-related configurations
- Monitor system performance during integration

## Rollback Plan
- Maintain current production endpoints
- Document all changes for potential rollback
- Keep existing functionality intact
- Test rollback procedures

## Next Steps
1. Begin Redis server verification
2. Update API integration in `merit.html`
3. Implement chat system enhancements
4. Conduct thorough testing
5. Document all changes and configurations

## Redis Access Configuration

### Backend Access (Verified)
- [x] Endpoint: `rl-platform-cache-2wqhx1.serverless.use2.cache.amazonaws.com:6379`
- [x] User ARN: `arn:aws:elasticache:us-east-2:559050208320:user:recursive-backend`
- [x] User credentials in SSM
- [ ] Lambda functions configured with VPC access
- [ ] Security group rules verified

### Frontend Access (To Be Implemented)
- [ ] Create frontend-specific Redis user
- [ ] Store credentials in SSM
- [ ] Configure API Gateway endpoints
- [ ] Implement frontend Redis client
- [ ] Add connection pooling
- [ ] Implement retry logic

### Access Patterns
```javascript
// Backend (Lambda) Access
const redis = new Redis({
  host: process.env.REDIS_ENDPOINT,
  port: 6379,
  username: 'recursive-backend',
  password: process.env.REDIS_PASSWORD,
  tls: {}
});

// Frontend (API) Access
const cache = {
  async get(key) {
    const response = await fetch('/api/v1/cache/' + key, {
      headers: {
        'X-API-Key': process.env.API_KEY
      }
    });
    return response.json();
  },
  
  async set(key, value, ttl = 3600) {
    await fetch('/api/v1/cache', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': process.env.API_KEY
      },
      body: JSON.stringify({ key, value, ttl })
    });
  }
};
```

### Security Requirements
- [ ] All Redis access through API Gateway
- [ ] Rate limiting implemented
- [ ] Request validation
- [ ] Error handling
- [ ] Monitoring and alerts 