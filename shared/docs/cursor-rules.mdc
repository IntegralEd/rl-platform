# Cursor Rules

## URL Conventions and Patterns

### File Naming Patterns
- `_admin.html` - Admin interface pages
- `_live.html` - Production/live versions for iframe embedding
- `_review.html` - Review session pages (tokenizable)
- `_temp.html` - Temporary/preview versions with placeholder content

### Directory Structure

#### Component Organization

* `/shared/page_ingredients/` - Contains all active, reusable HTML components that can be included in pages
  * Components here are used in production and should follow all established patterns
  * Only place fully tested, production-ready components here
  
* `/shared/docs/page_ingredients/` - Contains reference implementations and documentation of components
  * Files here should not be directly used in production pages
  * Use this location for experimental components, documentation examples, and pattern libraries
  * When a component is ready for production, it should be moved to `/shared/page_ingredients/[component]`

When moving components from documentation to production:
1. Copy files from `/shared/docs/page_ingredients/[component]` to `/shared/page_ingredients/[component]`
2. Update any references to point to the new location
3. Consider creating a README.md in the production component folder

```
/admin/pages/{client}/{project}/
  ├── {project}_admin.html
  └── assets/
      └── js/

/clients/{client}/{project}/
  ├── {project}.html      # Main content
  ├── {project}_live.html # Iframe-able version
  ├── {project}_temp.html # Preview/placeholder
  └── {project}_review.html # Review version
```

### URL Pattern Rules
1. Admin Pages
   - Pattern: `/admin/pages/{client}/{project}/_admin.html`
   - Must be in `/admin/pages/` directory
   - Client-specific admin pages in client subdirectories

2. Live/Production Pages
   - Pattern: `/clients/{client}/{project}/_live.html`
   - Primary pages for iframe embedding
   - Must be in client project directories

3. Review Pages
   - Pattern: `/clients/{client}/{project}/_review.html`
   - Designed for tokenized review sessions
   - Must be in client project directories

4. Temp Pages
   - Pattern: `/clients/{client}/{project}/_temp.html`
   - For placeholder/preview content
   - Must be in client project directories

## Admin Interface Rules [merit.html/04132025.09:28am.v.1.15]

### Layout Structure
1. Left Panel (20% width)
   - Shows styled card for each active {project}
   - Loads projects and tabs in the right 
   - Provides quick actions (copy URL, open in new tab)
   - Version display format: `{project}.html/MMDDYYYY.HH:MMam/pm.v.{version}`

2. Right Panel (80% width)
   - Tabbed interface for different functions
   - iFrame preview capabilities
   - Configuration tools
   - Build version indicator in header

### Version Control Integration
1. Git Commits
   ```bash
   # Format
   git commit -m "{project}.html/MMDDYYYY.HH:MMam/pm.v.{version}"
   
   # Example
   git commit -m "merit.html/04132025.09:28am.v.1.15"
   ```

2. Console Logging
   ```javascript
   console.log('[Merit Flow] Build version: merit.html/04132025.09:28am.v.1.15');
   console.log('[Merit Flow] Stage 0: Admin interface initialization');
   ```

### Admin Features
Each tab corresponds to a gem in the admin card and the tab of the UX. These are linked by `admin-{project}-logic.js` in the consolidated directory:
```
/admin/assets/js/admin-{project}-logic.js
```

### Implementation Rules
1. Review Session Tab
   - Create and manage review sessions
   - Configure review parameters
   - Generate review URLs
   - Log all actions with version info:
     ```javascript
     [Merit Flow] Action: Create review
     [Merit Flow] Version: merit.html/MMDDYYYY.HH:MMam/pm.v.1.15
     ```

2. iFrame Configuration Tab
   - Only allows `_live.html` or public URLs
   - Provides size and style options
   - Preview and code generation
   - Version tracking in generated code:
     ```html
     <!-- Generated by Merit Admin v1.15 -->
     <!-- Build: merit.html/04132025.09:28am.v.1.15 -->
     ```

### Error Handling
1. Network Errors
   ```javascript
   console.error('[Merit Flow] Network error:', {
     type: error.name,
     message: error.message,
     timestamp: new Date().toISOString(),
     version: 'merit.html/04132025.09:28am.v.1.15'
   });
   ```

2. Validation Errors
   ```javascript
   console.warn('[Merit Flow] Validation warning:', {
     field: invalidField,
     value: invalidValue,
     version: 'merit.html/04132025.09:28am.v.1.15'
   });
   ```

### Build Validation
- [ ] Version display matches in all locations
- [ ] Console logs include version info
- [ ] Git commits follow version format
- [ ] Generated code includes version comments
- [ ] Error logs contain version data

### Stage 0 Requirements
- [ ] Basic version display
- [ ] Lambda endpoint integration
- [ ] Error state handling
- [ ] Console logging standardization
- [ ] Build cycle documentation

## Softr Integration Rules

### Authentication Flow
1. Header Span Validation
   ```html
   <span id="header-span" data-user-email="" data-role-level="">
   ```
2. Role-based Access Control
   - Requires 'Org Admin' role
   - Validates through Softr context

### State Management
1. Validation State
   - Stored in sessionStorage
   - Includes timestamp for expiration
   - Preserves navigation context

2. Navigation Rules
   - Maintain validation state across pages
   - Handle redirect after login
   - Preserve intended destination

## Build Process Rules

### Version Control
1. Branch Management
   - Work from main branch
   - Pull before making changes
   - Regular commits with descriptive messages

2. File Organization
   - Follow directory structure conventions
   - Maintain asset organization
   - Use shared resources appropriately

### Quality Control
1. URL Validation
   - Automated path checking
   - Pattern enforcement
   - Console error reporting

2. Resource Loading
   - Verify asset paths
   - Handle loading failures
   - Report errors to console

### Documentation
1. Keep rules updated
2. Document new patterns
3. Maintain build checklists

## 🔒 URL Schema Rules
```javascript
// URL Pattern Rules
const URL_RULES = {
    // Live pages - READ ONLY
    live: {
        pattern: '*_live.html',
        constraints: {
            noAdminFunctions: true,
            noStateChanges: true,
            noAuthModification: true,
            noStyleChanges: true
        }
    },
    
    // Admin pages - LIMITED ACCESS
    admin: {
        pattern: '/shared/admin/*',
        constraints: {
            allowedActions: [
                'copyUrl',
                'launch',
                'viewInfo',
                'viewMetrics'
            ],
            forbiddenActions: [
                'editAuth',
                'modifyStyles',
                'changeBehavior',
                'updateState'
            ]
        }
    },
    
    // Review pages - READ ONLY
    review: {
        pattern: '*_review.html',
        constraints: {
            noAdminFunctions: true,
            noStateChanges: true,
            noAuthModification: true,
            noStyleChanges: true
        }
    }
}
```

## 🚫 Admin Function Constraints
```javascript
// Admin Function Rules
const ADMIN_RULES = {
    // Allowed Functions
    allowed: {
        copyUrl: {
            description: 'Copy page URL to clipboard',
            requiresAuth: false
        },
        launch: {
            description: 'Open page in new tab',
            requiresAuth: false
        },
        viewInfo: {
            description: 'View page information',
            requiresAuth: false
        },
        viewMetrics: {
            description: 'View page metrics',
            requiresAuth: false
        }
    },
    
    // Forbidden Functions (commented out until Softr integration)
    forbidden: {
        editAuth: {
            description: 'Modify authentication rules',
            requiresAuth: true,
            status: 'disabled'
        },
        modifyStyles: {
            description: 'Change page styles',
            requiresAuth: true,
            status: 'disabled'
        },
        changeBehavior: {
            description: 'Modify page behavior',
            requiresAuth: true,
            status: 'disabled'
        },
        updateState: {
            description: 'Update page state',
            requiresAuth: true,
            status: 'disabled'
        }
    }
}
```

## 🔍 Validation Rules
```javascript
// Page Validation Rules
const VALIDATION_RULES = {
    // Live Page Validation
    validateLivePage: (page) => {
        if (page.includes('_live.html')) {
            return {
                isValid: true,
                constraints: {
                    adminFunctions: false,
                    stateChanges: false,
                    authModification: false,
                    styleChanges: false
                }
            };
        }
        return { isValid: false };
    },
    
    // Admin Page Validation
    validateAdminPage: (page) => {
        if (page.startsWith('/shared/admin/')) {
            return {
                isValid: true,
                constraints: {
                    allowedActions: ADMIN_RULES.allowed,
                    forbiddenActions: ADMIN_RULES.forbidden
                }
            };
        }
        return { isValid: false };
    }
}
```

## 📝 Implementation Notes
1. All _live.html pages are read-only
2. Admin functions are limited to:
   - Copy URL
   - Launch page
   - View information
   - View metrics
3. Forbidden functions are:
   - Edit authentication
   - Modify styles
   - Change behavior
   - Update state
4. These rules apply until Softr integration

## 🎯 Usage Examples
```javascript
// Valid admin action
const copyUrl = () => {
    if (VALIDATION_RULES.validateAdminPage(currentPage).isValid) {
        // Allowed action
        navigator.clipboard.writeText(pageUrl);
    }
};

// Invalid admin action (commented out)
/*
const modifyAuth = () => {
    if (VALIDATION_RULES.validateAdminPage(currentPage).isValid) {
        // Forbidden action - will be enabled after Softr integration
        updateAuthRules();
    }
};
*/
```

## ⚠️ Warning Messages
```javascript
const WARNINGS = {
    forbiddenAction: 'This action requires Softr integration and is currently disabled.',
    livePageModification: 'Live pages are read-only and cannot be modified.',
    adminPrivileges: 'Admin privileges required. Will be available after Softr integration.'
}
```

# Cursor Rules for Recursive Learning Platform

## Merit Frontend Build Versioning [Apr 2024]

### Version Display Format
```javascript
// Format: merit.html/MMDDYYYY.HH:MMam/pm.v.1.15
// Example: merit.html/04132024.02:30pm.v.1.15
```

### Build Cycle Rules
- [ ] All commits must use version display format
- [ ] Version components:
  1. Prefix: `merit.html/`
  2. Date: `MMDDYYYY`
  3. Time: `HH:MMam/pm` (Central Time)
  4. Version: `v.1.15` (current MVP)

### Implementation
```javascript
// Version display initialization
document.addEventListener('DOMContentLoaded', () => {
    const now = new Date();
    const central = new Date(now.toLocaleString('en-US', { timeZone: 'America/Chicago' }));
    
    const month = String(central.getMonth() + 1).padStart(2, '0');
    const day = String(central.getDate()).padStart(2, '0');
    const year = central.getFullYear();
    const hours = central.getHours();
    const minutes = String(central.getMinutes()).padStart(2, '0');
    const ampm = hours >= 12 ? 'pm' : 'am';
    const formattedHours = String(hours % 12 || 12).padStart(2, '0');
    
    const version = `merit.html/${month}${day}${year}.${formattedHours}:${minutes}${ampm}.v.1.15`;
});
```

### Git Commit Rules
- [ ] Use version display as commit message
- [ ] Format: `git commit -m "merit.html/MMDDYYYY.HH:MMam/pm.v.1.15"`
- [ ] Time zone: America/Chicago (Central)
- [ ] Update version display in:
  1. HTML header
  2. Console logs
  3. Git commits
  4. Build artifacts

### Today's Build Cycle [Stage 0]
1. [ ] Frontend validation hardcoding
2. [ ] Lambda endpoint integration
3. [ ] OpenAI client documentation
4. [ ] Error state handling
5. [ ] Console logging standardization

### Version Control
- [ ] Store version in localStorage
- [ ] Log version on initialization
- [ ] Include in error reports
- [ ] Track in build history

### Validation
- [ ] Pre-commit hook verifies format
- [ ] Build script validates version
- [ ] Console logs match git commits
- [ ] Documentation reflects current version
``` 