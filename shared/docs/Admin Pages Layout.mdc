---
description: 
globs: 
alwaysApply: false
---
# Admin Pages Layout Guidelines
*Updated: April 2025*

## Core Layout Structure

The admin interface uses a gem-based card navigation system with dynamic content loading through partials:

### Top Banner
- 50px height sticky admin banner across all admin pages
- Admin blue background color
- Project logo positioned left
- User/account info positioned right
- Version indicator bottom right of banner

### Left Panel (Module Cards)
- Fixed width: 260px
- Display modules as expandable/collapsable cards
- **Active Card State:**
  - Expanded vertically with feature list
  - "Gem" indicator and callout connector pointing to content
  - Feature list with gem icons and short labels
- **Inactive Card State:**
  - Collapsed to 60px height
  - Only shows name and status gems (indicator dots)
- Module cards include status indicators for different services

### Right Panel (Dynamic Content)
- Responsive width (fills remaining space)
- Horizontal tab navigation that mirrors the active card's feature list
- Each tab links to a specific partial/component
- Content loads dynamically from shared components

## CSS Guidelines

### Layout Grid
```css
.admin-layout {
  display: grid;
  grid-template-columns: 260px 1fr;
  gap: 24px;
  padding: 24px;
}
```

### Module Cards
```css
.nav-card {
  position: relative;
  border-radius: 12px;
  padding: 16px;
  background: white;
  box-shadow: 0 1px 4px rgba(0,0,0,0.08);
  margin-bottom: 16px;
  transition: all 0.3s ease;
  overflow: hidden;
}

.nav-card.collapsed {
  height: 60px;
  padding: 12px 16px;
}

.nav-card .gem-icon {
  display: inline-block;
  width: 12px;
  height: 12px;
  margin-right: 8px;
  background: #007bff;
  border-radius: 50%;
}

.active-gem {
  position: absolute;
  top: 50%;
  right: -12px;
  transform: translateY(-50%);
  width: 16px;
  height: 16px;
  background: #007bff;
  border-radius: 50%;
  box-shadow: 0 0 0 4px rgba(0,123,255,0.2);
}

.callout-connector {
  position: absolute;
  width: 0;
  height: 0;
  top: 50%;
  left: 100%;
  transform: translateY(-50%);
  border-top: 10px solid transparent;
  border-bottom: 10px solid transparent;
  border-left: 12px solid #007bff;
}
```

### Feature Lists
```css
.feature-list {
  margin-top: 12px;
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.feature-list li {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
}

.feature-list .gem-icon {
  width: 10px;
  height: 10px;
  background: #007bff;
  border-radius: 50%;
}
```

### Tab Navigation
```css
.tab-header {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  margin-bottom: 16px;
}

.tab-header .tab {
  display: flex;
  align-items: center;
  gap: 6px;
  background: #e9f2ff;
  border-radius: 24px;
  padding: 6px 12px;
  font-size: 14px;
  color: #007bff;
}

.tab-header .tab .gem-icon {
  width: 10px;
  height: 10px;
  background: #007bff;
  border-radius: 50%;
}
```

## Component Integration

### Partial Components
- Each tab in the content panel loads a specific partial component
- Partials are loaded from `/shared/page_ingredients/` directory
- Components provide consistent UX across all module admin pages
- Standard partials include:
  - iframe (preview)
  - toggle (live/temp switching)
  - comments (feedback system)
  - change-orders (revision tracking)
  - lrs (learning record store)
  - status (system health monitor)

### Component Import
```javascript
// Load a partial component dynamically
function loadPartial(partialName, targetElement) {
  const link = document.createElement('link');
  link.rel = 'import';
  link.href = `/shared/page_ingredients/${partialName}/${partialName}.html`;
  
  link.onload = function() {
    // Create the custom element once loaded
    const element = document.createElement(`rl-${partialName}`);
    targetElement.appendChild(element);
  };
  
  document.head.appendChild(link);
}

// Example usage
loadPartial('iframe', document.getElementById('preview-container'));
```

## Implementation Notes

### Dynamic Module Loading
- Left panel cards should be data-driven
- Active state should be persisted in localStorage
- Feature list should be generated from available partials

### JavaScript Integration
- Use admin-common.js for shared functionality
- Create a component loader for managing partial imports
- Implement tab switching that persists the active partial

### State Management
- Store active module in URL parameter
- Store active tab in localStorage
- Enable deep linking to specific module+feature
