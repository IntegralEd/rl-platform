# Admin Pages April 5 Build Checklist

## Core Infrastructure

### URL Structure
- [ ] Implement URL pattern validation
- [ ] Enforce directory structure rules
- [ ] Validate file naming conventions
- [ ] Add automated path checking

### Authentication
- [ ] Softr header span integration
- [ ] Role-based access control
- [ ] Session state management
- [ ] Validation state persistence

### Layout Components
- [ ] Left panel (1/3 width) implementation
  - [ ] GitHub tree integration
  - [ ] Path validation
  - [ ] Quick actions
  - [ ] File system navigation
- [ ] Right panel (2/3 width) implementation
  - [ ] Tabbed interface
  - [ ] iFrame preview
  - [ ] Configuration panels

## Feature Tabs

### Broadcast Status Tab
- [ ] Current State Display
  - [ ] _live.html status indicator
  - [ ] _temp.html status indicator
  - [ ] Active review sessions
- [ ] Switcher Interface
  - [ ] Railroad-style UI for state toggling
  - [ ] State transition validation
  - [ ] Confirmation dialogs
- [ ] History and Logs
  - [ ] State change history
  - [ ] Deployment timestamps
  - [ ] Active user counts

### Review Session Tab
- [ ] Session Management
  - [ ] Date range selection
  - [ ] Role assignment
  - [ ] Token generation
  - [ ] Instructions editor
- [ ] Access Control
  - [ ] Reviewer invitations
  - [ ] Permission settings
  - [ ] Session monitoring
- [ ] Review Tools
  - [ ] Feedback collection
  - [ ] Change tracking
  - [ ] Session analytics

### Temp Content Tab
- [ ] Source Configuration
  - [ ] Path picker interface
  - [ ] Preview context settings
  - [ ] Custom override options
- [ ] Content Preview
  - [ ] Live preview window
  - [ ] Mobile/desktop toggle
  - [ ] Validation checks
- [ ] Integration Settings
  - [ ] Lambda/OpenAI config
  - [ ] External source handling
  - [ ] Cache management

### Behavior Rules Tab
- [ ] Rule Management
  - [ ] Auth rule editor
  - [ ] Feature flag controls
  - [ ] Behavior settings
- [ ] Script Integration
  - [ ] JS file editing
  - [ ] Rule validation
  - [ ] Version control
- [ ] Testing Tools
  - [ ] Rule simulation
  - [ ] Impact analysis
  - [ ] Rollback options

### Style Assets Tab
- [ ] Asset Management
  - [ ] CSS editor
  - [ ] Image uploader
  - [ ] Font manager
- [ ] Theme System
  - [ ] Theme selector
  - [ ] Color palette editor
  - [ ] Typography settings
- [ ] Asset Library
  - [ ] Shared assets browser
  - [ ] Version history
  - [ ] Usage tracking

### Learner Interaction Tab
- [ ] Data Integration
  - [ ] xAPI connection
  - [ ] LRS integration
  - [ ] Clickstream processing
- [ ] Analytics Display
  - [ ] User journey visualization
  - [ ] Interaction heatmaps
  - [ ] Time-based analysis
- [ ] Reporting Tools
  - [ ] Custom report builder
  - [ ] Export functionality
  - [ ] Alert configuration

## Quality Control

### Resource Validation
- [ ] Asset path verification
- [ ] Loading error handling
- [ ] Console error reporting
- [ ] Performance monitoring

### Testing Requirements
- [ ] URL pattern tests
- [ ] Authentication flow tests
- [ ] iFrame functionality tests
- [ ] Resource loading tests

### Documentation
- [ ] User guides
- [ ] API documentation
- [ ] Error handling guides
- [ ] Deployment instructions

## Integration Features

### GitHub Integration
- [ ] Repository sync
- [ ] Tree view updates
- [ ] File system access
- [ ] Version control

### Softr Platform
- [ ] Authentication flow
- [ ] User role management
- [ ] State persistence
- [ ] Navigation handling

### External Services
- [ ] Lambda/OpenAI Assistant integration
- [ ] Analytics integration
- [ ] Monitoring setup
- [ ] Backup systems

## Security Measures

### Access Control
- [ ] Role validation
- [ ] Session management
- [ ] Token handling
- [ ] Permission checks

### Data Protection
- [ ] Secure storage
- [ ] Data encryption
- [ ] Session timeout
- [ ] Error handling

## Maintenance

### Version Control
- [ ] Branch management
- [ ] Commit guidelines
- [ ] Release process
- [ ] Rollback procedures

### Updates
- [ ] Feature additions
- [ ] Bug fixes
- [ ] Security patches
- [ ] Documentation updates

## Future Enhancements

### Planned Features
- [ ] Advanced analytics
- [ ] Bulk operations
- [ ] Custom themes
- [ ] API extensions

### Integration Options
- [ ] Additional platforms
- [ ] Service connections
- [ ] Tool integrations
- [ ] Extension support

# Admin Pages Canonical Structure

This document provides the canonical structure for admin pages in the Recursive Learning platform.

## Admin Tree Structure

All admin pages must follow this general structure to maintain consistency:

```
/admin/
├── index.html                 # Main admin dashboard
├── assets/                    # Admin-specific assets
│   ├── css/                   # Admin stylesheets
│   ├── js/                    # Admin JavaScript files
│   └── img/                   # Admin images
└── pages/                     # Client-specific admin pages
    └── {client_id}/           # Client-specific directory
        └── {project}/         # Project-specific directory
            └── *_admin.html   # Admin page for specific project
```

## Review Page Structure

Review pages follow a parallel structure within the client directory:

```
/clients/
└── {client_id}/               # Client-specific directory
    └── {project}/             # Project-specific directory
        └── {project}.html_review.html  # Review page with token validation
```

## Admin Page Components

Each admin page should include the following components:

1. **Header**
   - Recursive Learning logo
   - Admin navigation
   - User info & logout

2. **Sidebar Navigation**
   - Project selection
   - Section navigation
   - Quick actions

3. **Main Content Area**
   - Tab-based interface
   - Content management
   - User management
   - Review management

4. **Footer**
   - Copyright information
   - Version information

## Token-Based Review System

The Recursive Learning platform uses an Airtable-driven token validation system for review pages:

### Airtable Integration

Review tokens are generated using Airtable formulas that combine:
- The Resource_HTML path from QC_Platform_Pages table
- The Session_ID from QC_Review_Session table

Formula:
```
=CONCATENATE({Resource_HTML},"_review.html/?qcid=",Session_ID)
```

This produces URLs in the format:
```
https://recursivelearning.app/clients/st/goalsetter/goalsetter.html_review.html/?qcid=reclsM4lpZVwg7LnC
```

### Review Page Implementation

Each `*_review.html` page should include:

1. **Token Validation Panel**
   - A minimal table showing active tokens with start/end dates
   - Located at the bottom of the page in a collapsible panel
   - Styled to match the admin interface

2. **Review UI Components**
   - Primary viewport (1200-1900px × 900px)
   - QIPU comment bar (60px collapsed, 150px expanded)
   - Comment management accordion (styled like admin panel)

### JavaScript Integration

The review page should include validation JavaScript that:
1. Extracts the `qcid` parameter from the URL
2. Checks it against a literal array of valid tokens in the page header
3. Verifies the current date falls within the token's validity period
4. Enables or disables the review interface accordingly

## Admin Page JavaScript Components

All admin pages should include:

1. **admin-common.js** - Core functionality for all admin pages
2. **admin-nav.js** - Navigation and sidebar behavior
3. **user-management.js** - User authentication and permissions
4. **content-review.js** - Review system integration

## Authentication Flow

1. Admin users authenticate through the main admin interface
2. Review users authenticate through tokenized URLs
3. Both experiences should maintain a consistent design language

## URL Conventions

- Admin pages: `/admin/pages/{client_id}/{project}/{project}_admin.html`
- Review pages: `/clients/{client_id}/{project}/{project}.html_review.html/?qcid={session_id}`

## Implementation Checklist

- [ ] Create consistent header and footer
- [ ] Implement responsive sidebar
- [ ] Add tab-based content areas
- [ ] Implement token validation for review pages
- [ ] Add user management interface
- [ ] Create review management tools
- [ ] Test across all supported browsers 