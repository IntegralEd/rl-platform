---
description: 
globs: 
alwaysApply: false
---
<<<<<<< HEAD
# Goalsetter Build Checklist (Updated April 7, 2025)
=======
# Goalsetter Build Checklist (Updated April 08, 2025)

## üéØ Current Priority: Qipu Comment Overlay
```javascript
// Qipu Comment Integration
const QipuComments = {
    overlay: {
        show: (screenshot) => {},
        capture: () => {},
        submit: async () => {}
    },
    review: {
        display: () => {},
        interact: () => {}
    }
}
```

### Today's Focus (goalsetter_review.html)
- [ ] Implement screenshot capture for qipu comments
- [ ] Add comment overlay positioning system
- [ ] Create comment submission flow
- [ ] Integrate with review panel
- [ ] Add visual feedback system
- [ ] Implement comment threading

### Technical Requirements
```javascript
// Comment Overlay Structure
{
    position: {x: number, y: number},
    screenshot: Base64String,
    comment: string,
    thread: CommentThread[],
    status: 'draft' | 'submitted' | 'resolved'
}
```

### Implementation Steps
1. Screenshot Capture
   - [ ] Add capture button to review toolbar
   - [ ] Implement screenshot region selection
   - [ ] Add visual feedback during capture
   - [ ] Save screenshot to temp storage

2. Comment Overlay
   - [ ] Create floating overlay component
   - [ ] Add positioning system
   - [ ] Implement drag-and-drop
   - [ ] Add resize handles

3. Comment Integration
   - [ ] Create comment input interface
   - [ ] Add threading support
   - [ ] Implement status management
   - [ ] Add notification system

4. Review Panel
   - [ ] Create comment list view
   - [ ] Add filtering options
   - [ ] Implement sorting
   - [ ] Add bulk actions

### Success Metrics
- Screenshot capture < 500ms
- Overlay positioning accuracy 100%
- Comment submission < 200ms
- Zero UI glitches
- All tests passing
>>>>>>> Merit-April-09

## üéØ Current State
```
/clients/st/
‚îú‚îÄ‚îÄ goalsetter.html      # Core file (30KB)
‚îú‚îÄ‚îÄ goalsetter_live.html # Live version (9.4KB) - READ ONLY
‚îú‚îÄ‚îÄ goalsetter_temp.html # Temp version (2.8KB)
‚îî‚îÄ‚îÄ goalsetter_review.html # Review version (67KB) - READ ONLY
```

## üìã Development Workflow Requirements

### Branch Management (NEW)
- [x] Work only on main branch for this project
- [x] Only modify files in `/clients`, `/shared`, and specific `/scripts`
- [x] Follow the new CURSOR rule `main-branch-directory-restrictions.mdc`
- [x] Pull latest changes before beginning work

### Standup Reporting (UPDATED)
- [x] Use new webhook-based standup reporting system
- [x] Submit reports using `submit-standup-webhook.js` script OR curl command
- [x] Follow standardized JSON format as defined in `frontend_standup_guide.md`
- [x] Label reports with source "frontend_cursor/goalsetter-E2E"

## üîÑ Phase 1: Core Cleanup (Steps 1-6)
```javascript
// Expected structure
const Goalsetter = {
    welcome: {},    // Welcome section
    interview: {},  // Interview flow
    chat: {},      // Chat interface
    tools: {}      // Tools section
}
```

### Cleanup Tasks
- [x] Remove Chatbase iframe from center slide
- [x] Restore welcome message
- [x] Fix interview flow
- [x] Clean up unused code
- [x] Update state management
- [x] Add health checks

üõë DECISION POINT 1: Core functionality
Options:
1. Continue if all tests pass
2. Fix any broken flows
3. Request human review

## üîç Phase 2: Review Features (Steps 7-12) (UPDATED)
```javascript
// Review Features
const ReviewFeatures = {
    tokenVerification: {
        description: 'Verify review tokens for authentication',
        requiresAuth: false
    },
    sessionTracking: {
        description: 'Track review session information',
        requiresAuth: false
    },
    commentSubmission: {
        description: 'Submit comments/tickets to Airtable',
        requiresAuth: false
    },
    screenshotCapture: {
        description: 'Capture and submit screenshots',
        requiresAuth: false 
    }
}
```

### Implementation
- [x] Add token verification with 'rec' prefix support
- [x] Implement session information display
- [x] Create session information table for report view
- [x] Implement real-time ticket count tracking
- [x] Add hardcoded admin tokens with indefinite validity
- [x] Add reporting view to show all QC tickets/comments
- [x] Implement validation for review tokens

üõë DECISION POINT 2: Review feature validation
Options:
1. Proceed if validation passes
2. Fix any issues
3. Request human review

## üé® Phase 3: UI Enhancement (Steps 13-18)
```javascript
// UI components
const UI = {
    welcome: {
        show: () => {},
        hide: () => {},
        update: () => {}
    },
    chat: {
        show: () => {},
        hide: () => {},
        update: () => {}
    },
    reviewPanel: {
        show: () => {},
        hide: () => {},
        update: () => {}
    }
}
```

### Features
- [x] Add loading states
- [x] Add token verification bar (50px callout)
- [x] Implement fixed session information display
- [x] Create feedback system
- [x] Improve accessibility for review features
- [x] Implement responsive design for review panels

üõë DECISION POINT 3: UI stability
Options:
1. Continue if UI tests pass
2. Fix any visual issues
3. Request human review

## üìà Phase 4: Monitoring Integration (Steps 19-25)
```javascript
// Monitoring hooks
const Monitor = {
    checkHealth: async () => {},
    captureState: async () => {},
    reportIssues: async () => {},
    trackMetrics: async () => {},
    trackTickets: async () => {}
}
```

### Implementation
- [x] Add health checks
- [x] Implement state tracking
- [x] Create issue reporting
- [x] Add ticket count tracking
- [x] Implement session information updates
- [x] Create reports with session data
- [x] Add Qipu integration for annotations

### Webhook Integration (NEW)
- [x] Use `submit-standup-webhook.js` for standup reporting
- [x] Use webhook for QC ticket submission to Airtable
- [x] Implement session info in webhook payload
- [x] Configure token validation
- [x] Add documentation for token system

üõë FINAL DECISION POINT
Options:
1. Deploy if all tests pass
2. Run extended tests
3. Request human review

## üß™ Test Scenarios
```javascript
describe('Goalsetter Review', () => {
    test('should validate tokens correctly', async () => {
        const reviewer = new ReviewSession('recABC123');
        expect(reviewer.isValidToken()).toBe(true);
    });
    
    test('should track ticket count', () => {
        const session = new ReviewSession('recABC123');
        session.addTicket({type: 'comment', text: 'Test comment'});
        expect(session.getTicketCount()).toBe(1);
    });
    
    test('should display session information', () => {
        const display = document.querySelector('.session-info-display');
        expect(display.classList.contains('visible')).toBe(true);
    });
});
```

## üìù Success Criteria
- All pages load < 2s
- State transitions < 100ms
- Zero console errors
- 100% accessibility score
- All tests passing
- No modifications to _live.html pages
- Successful standup report submissions via webhook
- Token verification working as expected
- Session information display working correctly
- Ticket count updates in real-time

## üö® Abort Conditions
1. State corruption
2. UI breaking
3. Performance degradation
4. Accessibility issues
5. Test failures
6. Attempted live page modification
7. Token verification failures

## üìä Metrics Collection
```javascript
const metrics = {
    collect: async () => ({
        loadTime: performance.now(),
        stateTransitions: Goalsetter.getTransitionCount(),
        errors: Goalsetter.getErrorCount(),
        accessibility: await a11y.getScore(),
        activeTokens: ReviewSession.getActiveTokenCount(),
        ticketsSubmitted: ReviewSession.getTicketCount()
    })
}
```

## üîÑ Rollback Plan
1. Keep version history
2. Store state snapshots
3. Maintain UI backups
4. Track changes
5. Preserve token verification logic

## üë• Human Review Triggers
1. State inconsistencies
2. UI regressions
3. Performance issues
4. Accessibility concerns
5. Test failures
6. Live page modification attempts
7. Token verification failures
8. Session information display issues

## Layout Compliance
- [x] Viewport-based container (95vw/85vh)
- [x] Fixed header with z-index 100
- [x] Dynamic chat window height
- [x] Fixed input area positioning
- [x] Loading state animations
- [x] Responsive embedded mode
- [x] Fixed token verification bar (50px below header)
- [x] Session information display beneath token bar

## State Management
- [x] Thread ID tracking
- [x] Message count tracking
- [x] Tab state persistence
- [x] Navigation state validation
- [x] Session token validation
- [x] Ticket count tracking

## Logging Implementation
- [x] Session initialization logs
- [x] Message tracking logs
- [x] Error handling logs
- [x] State change logs
- [x] Standup report submission logs
- [x] Token validation logs
- [x] Ticket submission logs

## Testing Requirements
- [x] Viewport responsiveness
- [x] Embedded mode functionality
- [x] Chat persistence
- [x] Navigation state preservation
- [x] Loading state transitions
- [x] Token validation
- [x] Session information display
- [x] Ticket count updating

## Performance Metrics
- [x] Layout render time < 100ms
- [x] Chat response time < 2s
- [x] Animation smoothness 60fps
- [x] No layout shifts during loading
- [x] Token validation < 50ms
- [x] Session information updates < 100ms

## Documentation
- [x] Updated goalsetter-build-checklist.mdc
- [x] Aligned with url-conventions.mdc
- [x] Followed standup-webhook-guide.mdc
- [x] Compliant with review-token-guide.mdc

## Migration Notes
- [x] BHB layout patterns integrated
- [x] Logging standards adopted
- [ ] Navigation flow updated
- [ ] Chat UI modernized
- [x] Standup report system migrated to webhook (NEW)

## Directory Structure
```
/clients/st/goalsetter/
‚îú‚îÄ‚îÄ goalsetter.html           # Main template
‚îú‚îÄ‚îÄ goalsetter_review.html    # Review version
‚îú‚îÄ‚îÄ goalsetter_live.html      # Live version
‚îú‚îÄ‚îÄ goalsetter_embed.html     # Embed version
‚îî‚îÄ‚îÄ assets/
    ‚îú‚îÄ‚îÄ css/
    ‚îÇ   ‚îú‚îÄ‚îÄ st-variables.css  # ST brand variables
    ‚îÇ   ‚îî‚îÄ‚îÄ st-custom.css     # Custom styles
    ‚îú‚îÄ‚îÄ js/
    ‚îÇ   ‚îî‚îÄ‚îÄ goalsetter-reporting.js # For webhook integration (NEW)
    ‚îî‚îÄ‚îÄ images/
        ‚îî‚îÄ‚îÄ ST TH Powered By White Logo.png
```

## Asset Setup

1. **CSS Files**
   - [ ] Create `/clients/st/goalsetter/assets/css/st-variables.css`
     ```css
     :root {
         --st-primary: #425563;
         --st-secondary: #E87722;
         --st-background: #f9f9f9;
         --st-text: #333;
     }
     ```
   - [ ] Create `/clients/st/goalsetter/assets/css/st-custom.css`
     ```css
     /* Custom styles for GoalSetter */
     .goalsetter-container {
         background: var(--st-background);
         color: var(--st-text);
     }
     ```

2. **JavaScript**
   - [ ] Create `/clients/st/goalsetter/assets/js/st-goalsetter-auth.js`
     ```javascript
     // Auth logic for GoalSetter
     const auth = {
         init: () => {
             console.log('GoalSetter auth initialized');
         }
     };
     ```

3. **Images**
   - [ ] Add logo to `/clients/st/goalsetter/assets/images/`
   - [ ] Verify logo path in HTML: `assets/images/ST TH Powered By White Logo.png`

## HTML Template Setup

1. **Base Template**
   ```html
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>GoalSetter</title>
       <link rel="stylesheet" href="assets/css/st-variables.css">
       <link rel="stylesheet" href="assets/css/st-custom.css">
   </head>
   <body>
       <div class="goalsetter-container">
           <!-- Content -->
       </div>
       <script src="assets/js/st-goalsetter-auth.js"></script>
   </body>
   </html>
   ```

2. **Version Files**
   - [ ] Create goalsetter_review.html
   - [ ] Create goalsetter_live.html
   - [ ] Create goalsetter_embed.html

## Admin Panel Setup

1. **Admin Template**
   - [ ] Create `/admin/pages/st/goalsetter/goalsetter_admin.html`
   - [ ] Link to client pages
   - [ ] Add version controls

2. **Admin Assets**
   - [ ] Add admin-specific styles
   - [ ] Add admin-specific scripts

## Testing Checklist

1. **Asset Loading**
   - [ ] CSS files load without 404s
   - [ ] JavaScript files load without 404s
   - [ ] Images load without 404s

2. **Version Testing**
   - [ ] Review version loads correctly
   - [ ] Live version loads correctly
   - [ ] Embed version loads correctly

3. **Admin Testing**
   - [ ] Admin panel loads correctly
   - [ ] Version controls work
   - [ ] Settings save correctly

## Deployment Steps

1. **Asset Deployment**
   - [ ] Upload CSS files
   - [ ] Upload JavaScript files
   - [ ] Upload images

2. **Template Deployment**
   - [ ] Deploy main template
   - [ ] Deploy version files
   - [ ] Deploy admin panel

3. **Post-Deployment**
   - [ ] Verify all assets load
   - [ ] Test all versions
   - [ ] Test admin controls 

## üèóÔ∏è Structure
- [ ] Implement constrained learning area (800px max width)
- [ ] Add sticky navigation controls
- [ ] Break form into logical sub-sections
- [ ] Implement progressive disclosure
- [ ] Add visual hierarchy for active/minimized sections

## üîå API Integration
- [ ] Implement form submission handler
- [ ] Add state management for thread_id
- [ ] Handle API errors gracefully
- [ ] Validate CORS headers
- [ ] Test all URL context modes (_live, _temp, _review)

## üì± Responsive Design
- [ ] Test constrained layout on all breakpoints
- [ ] Verify sticky controls behavior
- [ ] Test form field visibility
- [ ] Validate scroll behavior
- [ ] Check header compaction

## üéØ Form Features
- [ ] Implement section validation
- [ ] Add progress tracking
- [ ] Handle form state persistence
- [ ] Add error feedback
- [ ] Test form submission flow

## üîí Security
- [ ] Sanitize user input
- [ ] Validate API responses
- [ ] Handle session state
- [ ] Test error scenarios
- [ ] Verify CORS configuration

## üìä Testing
- [ ] Test all form sections
- [ ] Verify API integration
- [ ] Check responsive behavior
- [ ] Validate error handling
- [ ] Test state persistence

## üé® UI/UX
- [ ] Implement visual hierarchy
- [ ] Add smooth transitions
- [ ] Verify navigation flow
- [ ] Test form feedback
- [ ] Check accessibility

## üìù Documentation
- [ ] Update API integration guide
- [ ] Document state management
- [ ] Add error handling guide
- [ ] Update testing procedures
- [ ] Document layout constraints 

## Webhook Implementation (NEW)
```javascript
// Standup webhook integration
import { submitStandupReport } from '/shared/assets/js/frontend-standup-client.js';

// Example report submission
submitStandupReport({
  developer: 'Frontend Team',
  findings: [
    'Implemented goal setter UI component',
    'Fixed responsive layout issues'
  ],
  priorities: [
    'Complete loading state animations',
    'Integrate with backend API'
  ],
  nextSteps: [
    'User testing',
    'Documentation updates'
  ],
  futureFeatures: [
    'Real-time collaboration',
    'Dashboard integration'
  ]
});
```

## Webhook Resources (NEW)
- Standard Implementation: `/shared/assets/js/frontend-standup-client.js`
- Command-line Tool: `/scripts/submit-standup-webhook.js` 
- Documentation: `/shared/docs/frontend_standup_guide.md`
- Report Template: `/shared/docs/standup-reports/TEMPLATE_frontend.md`

## Team Collaboration (NEW)
- Frontend team works on `/clients` and `/shared` directories in main branch
- Admin team works on `/admin` directory in their own branch
- All teams use the webhook system for standup reporting
- Admin team labels reports with source "Frontend/admin-tree"
- Coordination happens through the webhook system 